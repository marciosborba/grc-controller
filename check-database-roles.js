#!/usr/bin/env node

/**
 * Script para verificar e corrigir problemas com roles no banco de dados
 */

import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase (usando vari√°veis de ambiente se dispon√≠veis)
const supabaseUrl = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL || 'https://myxvxponlmulnjstbjwd.supabase.co';
const supabaseAnonKey = process.env.SUPABASE_ANON_KEY || process.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im15eHZ4cG9ubG11bG5qc3RianciLCJyb2xlIjoiYW5vbiIsImlhdCI6MTczNjg2NzE5NywiZXhwIjoyMDUyNDQzMTk3fQ.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8';

console.log('üîó Conectando ao Supabase:', supabaseUrl);

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function checkDatabase() {
  console.log('üîç Verificando banco de dados...');
  
  try {
    // 1. Verificar se a tabela custom_roles existe
    console.log('\n1Ô∏è‚É£ Verificando tabela custom_roles...');
    
    const { data: customRoles, error: customRolesError } = await supabase
      .from('custom_roles')
      .select('*')
      .limit(5);
    
    if (customRolesError) {
      console.log('‚ùå Erro ao acessar custom_roles:', customRolesError.message);
      
      if (customRolesError.code === '42P01') {
        console.log('üìã A tabela custom_roles n√£o existe');
        console.log('üí° Isso explica o erro "Erro inesperado ao carregar roles"');
        console.log('‚úÖ A aplica√ß√£o agora usa fallback para roles do sistema');
      } else if (customRolesError.code === '42501') {
        console.log('üîí Problema de permiss√µes RLS na tabela custom_roles');
        console.log('‚úÖ A aplica√ß√£o agora usa fallback para roles do sistema');
      }
    } else {
      console.log('‚úÖ Tabela custom_roles acess√≠vel');
      console.log(`üìä Encontradas ${customRoles?.length || 0} roles`);
      
      if (customRoles && customRoles.length > 0) {
        console.log('üìã Roles encontradas:');
        customRoles.forEach(role => {
          console.log(`  - ${role.display_name || role.name} (${role.permissions?.length || 0} permiss√µes)`);
        });
      }
    }
    
    // 2. Verificar tabela user_roles
    console.log('\n2Ô∏è‚É£ Verificando tabela user_roles...');
    
    const { data: userRoles, error: userRolesError } = await supabase
      .from('user_roles')
      .select('*')
      .limit(5);
    
    if (userRolesError) {
      console.log('‚ùå Erro ao acessar user_roles:', userRolesError.message);
    } else {
      console.log('‚úÖ Tabela user_roles acess√≠vel');
      console.log(`üìä Encontrados ${userRoles?.length || 0} registros de roles de usu√°rio`);
    }
    
    // 3. Verificar tabela profiles
    console.log('\n3Ô∏è‚É£ Verificando tabela profiles...');
    
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('user_id, full_name, tenant_id')
      .limit(3);
    
    if (profilesError) {
      console.log('‚ùå Erro ao acessar profiles:', profilesError.message);
    } else {
      console.log('‚úÖ Tabela profiles acess√≠vel');
      console.log(`üìä Encontrados ${profiles?.length || 0} perfis de usu√°rio`);
    }
    
    // 4. Verificar autentica√ß√£o atual
    console.log('\n4Ô∏è‚É£ Verificando autentica√ß√£o...');
    
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError) {
      console.log('‚ùå Erro de autentica√ß√£o:', authError.message);
      console.log('üí° Execute este script ap√≥s fazer login na aplica√ß√£o');
    } else if (user) {
      console.log('‚úÖ Usu√°rio autenticado:', user.email);
    } else {
      console.log('‚ö†Ô∏è Nenhum usu√°rio autenticado');
      console.log('üí° Execute este script ap√≥s fazer login na aplica√ß√£o');
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
  
  console.log('\nüìã RESUMO:');
  console.log('==========================================');
  console.log('‚úÖ Corre√ß√µes aplicadas no c√≥digo:');
  console.log('  - AppSidebar com try-catch robusto');
  console.log('  - Timeout de 5 segundos para queries');
  console.log('  - Fallback para roles do sistema');
  console.log('  - AuthContext otimizado');
  console.log('');
  console.log('üéØ Resultado esperado:');
  console.log('  - Erro "Erro inesperado ao carregar roles" eliminado');
  console.log('  - Aplica√ß√£o carrega com roles b√°sicas do sistema');
  console.log('  - Performance melhorada');
  console.log('');
  console.log('üîÑ Reinicie o servidor se ainda n√£o fez:');
  console.log('  npm run dev');
}

checkDatabase();