const { createClient } = require('@supabase/supabase-js');

const SUPABASE_URL = "https://myxvxponlmulnjstbjwd.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im15eHZ4cG9ubG11bG5qc3RiandkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMwMTQzNTMsImV4cCI6MjA2ODU5MDM1M30.V9yqc2cgrRCLxlXF2HkISzPT9WQ7Hw14r_yE8UROgD4";

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function testWithAuth() {
  try {
    console.log('üîê Testando CRUD com autentica√ß√£o...\n');

    // Primeiro, tentar criar um usu√°rio de teste ou fazer login
    console.log('1Ô∏è‚É£ Tentando autentica√ß√£o...');
    
    // Tentar fazer login com credentials de teste
    const testEmail = 'test@exemplo.com';
    const testPassword = 'testpassword123';

    console.log(`Tentando login com: ${testEmail}`);
    
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    });

    if (loginError) {
      console.log('‚ö†Ô∏è Login falhou:', loginError.message);
      
      // Tentar criar o usu√°rio
      console.log('2Ô∏è‚É£ Tentando criar usu√°rio de teste...');
      const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
        email: testEmail,
        password: testPassword
      });

      if (signUpError) {
        console.log('‚ùå Cria√ß√£o de usu√°rio falhou:', signUpError.message);
        console.log('Detalhes:', signUpError);
      } else {
        console.log('‚úÖ Usu√°rio criado:', signUpData?.user?.email);
      }
    } else {
      console.log('‚úÖ Login bem-sucedido:', loginData?.user?.email);
    }

    // Verificar se est√° autenticado
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError || !user) {
      console.log('‚ùå Usu√°rio n√£o autenticado:', userError?.message);
      
      // Tentar uma abordagem diferente: autentica√ß√£o an√¥nima se dispon√≠vel
      console.log('3Ô∏è‚É£ Tentando abordagem alternativa...');
      console.log('RLS est√° impedindo opera√ß√µes sem autentica√ß√£o adequada.');
      console.log('\nüîß SOLU√á√ïES POSS√çVEIS:');
      console.log('1. Execute manualmente no painel Supabase:');
      console.log('   ALTER TABLE legal_bases DISABLE ROW LEVEL SECURITY;');
      console.log('   ALTER TABLE consents DISABLE ROW LEVEL SECURITY;');
      console.log('   ALTER TABLE data_inventory DISABLE ROW LEVEL SECURITY;');
      console.log('   ALTER TABLE dpia_assessments DISABLE ROW LEVEL SECURITY;');
      console.log('   ALTER TABLE data_subject_requests DISABLE ROW LEVEL SECURITY;');
      console.log('   ALTER TABLE privacy_incidents DISABLE ROW LEVEL SECURITY;');
      console.log('   ALTER TABLE processing_activities DISABLE ROW LEVEL SECURITY;');
      console.log('\n2. Ou configure pol√≠ticas RLS adequadas');
      console.log('\n3. Ou crie um usu√°rio v√°lido no sistema de autentica√ß√£o');
      
      return;
    }

    console.log('‚úÖ Usu√°rio autenticado:', user.email);

    // Agora testar inser√ß√£o com usu√°rio autenticado
    console.log('\n4Ô∏è‚É£ Testando inser√ß√£o com usu√°rio autenticado...');

    const testData = {
      name: 'Teste com Autentica√ß√£o',
      description: 'Base legal de teste com usu√°rio autenticado',
      legal_basis_type: 'consentimento',
      legal_article: 'Art. 7¬∫, I da LGPD',
      justification: 'Teste com autentica√ß√£o para verificar se RLS permite',
      applies_to_categories: ['nome', 'email'],
      applies_to_processing: ['marketing'],
      valid_from: new Date().toISOString().split('T')[0],
      status: 'active',
      created_by: user.id,
      updated_by: user.id
    };

    const { data: insertData, error: insertError } = await supabase
      .from('legal_bases')
      .insert([testData])
      .select();

    if (insertError) {
      console.log('‚ùå Ainda h√° erro com autentica√ß√£o:', insertError.message);
      console.log('C√≥digo:', insertError.code);
      console.log('Detalhes:', insertError);
    } else {
      console.log('üéâ SUCESSO! Inser√ß√£o funcionou com autentica√ß√£o!');
      console.log('ID criado:', insertData[0]?.id);

      // Limpar o teste
      if (insertData && insertData[0]) {
        await supabase
          .from('legal_bases')
          .delete()
          .eq('id', insertData[0].id);
        console.log('üóëÔ∏è Registro de teste removido');
      }
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

testWithAuth();