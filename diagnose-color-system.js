// Script de diagn√≥stico completo do sistema de cores
console.log('üîç === DIAGN√ìSTICO COMPLETO DO SISTEMA DE CORES ===');

// 1. VERIFICAR ESTADO ATUAL
console.log('\nüìä 1. ESTADO ATUAL:');
const currentPrimary = getComputedStyle(document.documentElement).getPropertyValue('--primary').trim();
console.log('Cor prim√°ria atual:', currentPrimary);

const isDark = document.documentElement.classList.contains('dark');
console.log('Modo atual:', isDark ? 'dark' : 'light');

// 2. VERIFICAR ESTILOS EXISTENTES
console.log('\nüé® 2. ESTILOS DIN√ÇMICOS EXISTENTES:');
const dynamicStyles = document.querySelectorAll('style[id]');
dynamicStyles.forEach(style => {
  console.log(`- ${style.id}: ${style.textContent.length} caracteres`);
});

// 3. TESTE DE APLICA√á√ÉO DIRETA
console.log('\nüß™ 3. TESTE DE APLICA√á√ÉO DIRETA:');
console.log('Tentando aplicar vermelho puro...');

// Remover estilos conflitantes
const conflictingStyles = document.querySelectorAll('#grc-dynamic-preview, #grc-user-colors, #preview-colors, #dynamic-colors');
conflictingStyles.forEach(style => {
  console.log(`Removendo estilo conflitante: ${style.id}`);
  style.remove();
});

// Aplicar cor diretamente
document.documentElement.style.setProperty('--primary', '0 100% 50%', 'important');

// Verificar se foi aplicada
setTimeout(() => {
  const newPrimary = getComputedStyle(document.documentElement).getPropertyValue('--primary').trim();
  console.log('Cor ap√≥s aplica√ß√£o direta:', newPrimary);
  
  if (newPrimary.includes('0 100% 50%') || newPrimary.includes('255, 0, 0')) {
    console.log('‚úÖ Aplica√ß√£o direta FUNCIONOU');
  } else {
    console.log('‚ùå Aplica√ß√£o direta FALHOU');
    
    // 4. DIAGN√ìSTICO AVAN√áADO
    console.log('\nüî¨ 4. DIAGN√ìSTICO AVAN√áADO:');
    
    // Verificar se h√° CSS com !important sobrescrevendo
    const allStyles = Array.from(document.styleSheets);
    console.log(`Verificando ${allStyles.length} folhas de estilo...`);
    
    allStyles.forEach((sheet, index) => {
      try {
        const rules = Array.from(sheet.cssRules || sheet.rules || []);
        rules.forEach(rule => {
          if (rule.style && rule.style.getPropertyValue('--primary')) {
            console.log(`Regra encontrada na folha ${index}:`, rule.cssText);
          }
        });
      } catch (e) {
        console.log(`N√£o foi poss√≠vel acessar folha de estilo ${index}:`, e.message);
      }
    });
    
    // 5. FOR√áA BRUTA M√ÅXIMA
    console.log('\nüí• 5. APLICA√á√ÉO COM FOR√áA BRUTA:');
    
    const forceStyle = document.createElement('style');
    forceStyle.id = 'FORCE-DIAGNOSTIC-RED';
    forceStyle.textContent = `
      /* FOR√áA M√ÅXIMA - DIAGN√ìSTICO */
      html:root,
      html.dark:root,
      :root,
      .dark,
      * {
        --primary: 0 100% 50% !important;
      }
      
      /* FOR√áA ELEMENTOS ESPEC√çFICOS */
      .bg-primary,
      button[class*="bg-primary"],
      [class*="bg-primary"],
      .text-primary,
      [class*="text-primary"] {
        background-color: rgb(255, 0, 0) !important;
        color: rgb(255, 0, 0) !important;
        border-color: rgb(255, 0, 0) !important;
      }
      
      /* FOR√áA SIDEBAR */
      [data-sidebar="sidebar"] [class*="text-primary"],
      [data-sidebar="sidebar"] .text-primary {
        color: rgb(255, 0, 0) !important;
      }
    `;
    
    document.head.insertBefore(forceStyle, document.head.firstChild);
    
    // Verificar novamente ap√≥s for√ßa bruta
    setTimeout(() => {
      const finalPrimary = getComputedStyle(document.documentElement).getPropertyValue('--primary').trim();
      console.log('Cor ap√≥s for√ßa bruta:', finalPrimary);
      
      // Verificar elementos espec√≠ficos
      const primaryElements = document.querySelectorAll('.bg-primary, .text-primary, [class*="bg-primary"], [class*="text-primary"]');
      console.log(`Encontrados ${primaryElements.length} elementos prim√°rios`);
      
      primaryElements.forEach((el, index) => {
        const computedStyle = getComputedStyle(el);
        const bgColor = computedStyle.backgroundColor;
        const textColor = computedStyle.color;
        console.log(`Elemento ${index}: bg=${bgColor}, color=${textColor}`);
      });
      
      if (finalPrimary.includes('0 100% 50%') || primaryElements.length > 0) {
        console.log('‚úÖ FOR√áA BRUTA FUNCIONOU - Sistema pode aplicar cores');
        console.log('üîß PROBLEMA: Especificidade ou conflito de CSS');
        console.log('üí° SOLU√á√ÉO: Aumentar especificidade no sistema h√≠brido');
      } else {
        console.log('‚ùå FOR√áA BRUTA FALHOU - Problema mais profundo');
        console.log('üîß PROBLEMA: Sistema CSS fundamentalmente bloqueado');
        console.log('üí° SOLU√á√ÉO: Verificar se h√° CSS externo ou sistema bloqueando');
      }
      
      // Limpar ap√≥s teste
      setTimeout(() => {
        forceStyle.remove();
        document.documentElement.style.removeProperty('--primary');
        console.log('üßπ Limpeza do diagn√≥stico conclu√≠da');
      }, 5000);
      
    }, 1000);
  }
}, 500);

// 6. VERIFICAR SISTEMA DE APLICA√á√ÉO
console.log('\n‚öôÔ∏è 6. VERIFICANDO SISTEMA DE APLICA√á√ÉO:');
console.log('Hook useStaticColorManager dispon√≠vel:', typeof window.useStaticColorManager);
console.log('Fun√ß√£o applyColors dispon√≠vel:', typeof window.applyColors);

// 7. VERIFICAR CONFLITOS CONHECIDOS
console.log('\n‚ö†Ô∏è 7. VERIFICANDO CONFLITOS CONHECIDOS:');
const knownConflicts = [
  'grc-user-colors',
  'grc-temp-colors', 
  'dynamic-colors',
  'preview-colors',
  'EXTREME-FORCE-COLORS',
  'FORCE-GREEN-TEAL'
];

knownConflicts.forEach(id => {
  const element = document.getElementById(id);
  if (element) {
    console.log(`‚ö†Ô∏è Conflito encontrado: ${id}`);
  }
});

// 8. RELAT√ìRIO FINAL
console.log('\nüìã 8. RELAT√ìRIO FINAL:');
console.log('- Execute este script no console do navegador');
console.log('- Observe os resultados de cada teste');
console.log('- Se for√ßa bruta funcionar, problema √© de especificidade');
console.log('- Se for√ßa bruta falhar, problema √© mais fundamental');
console.log('');
console.log('üîß Para corrigir, baseie-se no resultado do diagn√≥stico');

// Disponibilizar globalmente
window.diagnoseColors = () => {
  console.clear();
  eval(document.querySelector('script[src*="diagnose"]')?.textContent || 'console.log("Script n√£o encontrado")');
};