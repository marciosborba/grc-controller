#!/usr/bin/env node\n\nconst { Client } = require('pg');\nrequire('dotenv').config();\n\nasync function validateMigration() {\n  const client = new Client({\n    host: 'db.myxvxponlmulnjstbjwd.supabase.co',\n    port: 5432,\n    database: 'postgres',\n    user: 'postgres',\n    password: process.env.SUPABASE_DB_PASSWORD,\n    ssl: { rejectUnauthorized: false }\n  });\n\n  try {\n    console.log('🔗 Conectando ao banco...');\n    await client.connect();\n    console.log('✅ Conectado!');\n\n    console.log('\\n🔍 VALIDAÇÃO DA MIGRAÇÃO DE TENANT_ID');\n    console.log('=' .repeat(50));\n\n    // Tabelas que devem ter tenant_id\n    const tables = [\n      'audits',\n      'audit_findings', \n      'audit_attachments',\n      'audit_action_items',\n      'audit_team_members',\n      'audit_reports',\n      'activity_logs',\n      'ai_chat_logs',\n      'frameworks',\n      'framework_controls',\n      'compliance_records',\n      'controls',\n      'user_roles',\n      'ai_grc_prompt_templates'\n    ];\n\n    let allValid = true;\n    const results = [];\n\n    for (const table of tables) {\n      try {\n        // Verificar se tabela existe\n        const tableExists = await client.query(`\n          SELECT EXISTS (\n            SELECT FROM information_schema.tables \n            WHERE table_name = $1\n          );\n        `, [table]);\n        \n        if (!tableExists.rows[0].exists) {\n          results.push({ table, status: '⚠️ TABELA NÃO EXISTE', details: '' });\n          continue;\n        }\n        \n        // Verificar se tenant_id existe\n        const columnExists = await client.query(`\n          SELECT \n            column_name,\n            data_type,\n            is_nullable,\n            column_default\n          FROM information_schema.columns \n          WHERE table_name = $1 AND column_name = 'tenant_id'\n        `, [table]);\n        \n        if (columnExists.rows.length === 0) {\n          results.push({ table, status: '❌ SEM TENANT_ID', details: 'Coluna tenant_id não encontrada' });\n          allValid = false;\n          continue;\n        }\n        \n        const column = columnExists.rows[0];\n        const isNullable = column.is_nullable === 'YES';\n        \n        // Verificar registros órfãos\n        const orphanResult = await client.query(`SELECT COUNT(*) FROM ${table} WHERE tenant_id IS NULL`);\n        const orphanCount = parseInt(orphanResult.rows[0].count);\n        \n        // Verificar total de registros\n        const totalResult = await client.query(`SELECT COUNT(*) FROM ${table}`);\n        const totalCount = parseInt(totalResult.rows[0].count);\n        \n        // Verificar se RLS está habilitado\n        const rlsResult = await client.query(`\n          SELECT relrowsecurity \n          FROM pg_class \n          WHERE relname = $1\n        `, [table]);\n        \n        const rlsEnabled = rlsResult.rows.length > 0 && rlsResult.rows[0].relrowsecurity;\n        \n        // Verificar se há política RLS\n        const policyResult = await client.query(`\n          SELECT COUNT(*) as policy_count\n          FROM pg_policies \n          WHERE tablename = $1\n        `, [table]);\n        \n        const policyCount = parseInt(policyResult.rows[0].policy_count);\n        \n        // Determinar status\n        let status = '✅ OK';\n        let details = [];\n        \n        if (isNullable) {\n          status = '⚠️ NULLABLE';\n          details.push('tenant_id permite NULL');\n          allValid = false;\n        }\n        \n        if (orphanCount > 0) {\n          status = '❌ ÓRFÃOS';\n          details.push(`${orphanCount} registros órfãos`);\n          allValid = false;\n        }\n        \n        if (!rlsEnabled) {\n          if (status === '✅ OK') status = '⚠️ SEM RLS';\n          details.push('RLS não habilitado');\n        }\n        \n        if (policyCount === 0) {\n          if (status === '✅ OK') status = '⚠️ SEM POLICY';\n          details.push('Sem políticas RLS');\n        }\n        \n        details.push(`${totalCount} registros`);\n        if (rlsEnabled) details.push('RLS ativo');\n        if (policyCount > 0) details.push(`${policyCount} políticas`);\n        \n        results.push({ \n          table, \n          status, \n          details: details.join(', ')\n        });\n        \n      } catch (error) {\n        results.push({ table, status: '❌ ERRO', details: error.message });\n        allValid = false;\n      }\n    }\n    \n    // Exibir resultados\n    console.log('\\n📋 RESULTADOS DA VALIDAÇÃO:');\n    console.log('-'.repeat(80));\n    \n    results.forEach(result => {\n      console.log(`${result.status.padEnd(15)} ${result.table.padEnd(25)} ${result.details}`);\n    });\n    \n    // Verificar tenants\n    console.log('\\n🏢 TENANTS DISPONÍVEIS:');\n    console.log('-'.repeat(40));\n    \n    const tenantsResult = await client.query('SELECT id, name, is_active FROM tenants ORDER BY created_at');\n    tenantsResult.rows.forEach(tenant => {\n      const status = tenant.is_active ? '✅' : '❌';\n      console.log(`${status} ${tenant.name} (${tenant.id})`);\n    });\n    \n    // Verificar funções e triggers\n    console.log('\\n🔧 FUNÇÕES E TRIGGERS:');\n    console.log('-'.repeat(40));\n    \n    // Verificar função get_current_tenant\n    const functionResult = await client.query(`\n      SELECT EXISTS (\n        SELECT FROM pg_proc \n        WHERE proname = 'get_current_tenant'\n      );\n    `);\n    \n    const functionExists = functionResult.rows[0].exists;\n    console.log(`${functionExists ? '✅' : '❌'} Função get_current_tenant`);\n    \n    // Verificar função ensure_tenant_id\n    const triggerFunctionResult = await client.query(`\n      SELECT EXISTS (\n        SELECT FROM pg_proc \n        WHERE proname = 'ensure_tenant_id'\n      );\n    `);\n    \n    const triggerFunctionExists = triggerFunctionResult.rows[0].exists;\n    console.log(`${triggerFunctionExists ? '✅' : '❌'} Função ensure_tenant_id`);\n    \n    // Verificar triggers\n    const triggersResult = await client.query(`\n      SELECT \n        event_object_table as table_name,\n        trigger_name\n      FROM information_schema.triggers \n      WHERE trigger_name LIKE '%tenant_id%'\n      ORDER BY event_object_table;\n    `);\n    \n    console.log(`\\n📌 Triggers encontrados: ${triggersResult.rows.length}`);\n    triggersResult.rows.forEach(trigger => {\n      console.log(`   ✅ ${trigger.table_name}: ${trigger.trigger_name}`);\n    });\n    \n    // Resumo final\n    console.log('\\n' + '='.repeat(50));\n    if (allValid) {\n      console.log('🎉 MIGRAÇÃO VÁLIDA! Todos os requisitos atendidos.');\n    } else {\n      console.log('⚠️ MIGRAÇÃO INCOMPLETA! Verifique os itens marcados acima.');\n    }\n    \n    console.log('\\n📊 ESTATÍSTICAS:');\n    const validTables = results.filter(r => r.status === '✅ OK').length;\n    const totalTables = results.length;\n    console.log(`   • Tabelas válidas: ${validTables}/${totalTables}`);\n    console.log(`   • Funções: ${functionExists && triggerFunctionExists ? '2/2' : '❌'}`);\n    console.log(`   • Triggers: ${triggersResult.rows.length}`);\n    console.log(`   • Tenants: ${tenantsResult.rows.length}`);\n    \n    return allValid;\n    \n  } catch (error) {\n    console.error('❌ Erro durante validação:', error.message);\n    return false;\n  } finally {\n    await client.end();\n    console.log('\\n🔌 Desconectado');\n  }\n}\n\nvalidateMigration().then(success => {\n  process.exit(success ? 0 : 1);\n}).catch(console.error);"