#!/usr/bin/env node

/**
 * Script para testar a integra√ß√£o do m√≥dulo de pol√≠ticas com o frontend
 * Verifica se todos os subprocessos est√£o funcionando corretamente
 */

import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://myxvxponlmulnjstbjwd.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im15eHZ4cG9ubG11bG5qc3RiandkIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNzY0NzE5NCwiZXhwIjoyMDUzMjIzMTk0fQ.Vo1agPUE4QGwlwqSJJJJJJJJJJJJJJJJJJJJJJJJJJJ';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testPolicyModule() {
  console.log('üß™ Testando integra√ß√£o do m√≥dulo de pol√≠ticas...\n');

  try {
    // 1. Testar busca de pol√≠ticas
    console.log('üìã 1. Testando busca de pol√≠ticas...');
    const { data: policies, error: policiesError } = await supabase
      .from('policies')
      .select('id, title, status, category, created_at')
      .order('created_at', { ascending: false })
      .limit(5);

    if (policiesError) {
      console.error('‚ùå Erro ao buscar pol√≠ticas:', policiesError.message);
      return false;
    }

    console.log(`‚úÖ ${policies.length} pol√≠ticas encontradas:`);
    policies.forEach(policy => {
      console.log(`   ‚Ä¢ ${policy.title} (${policy.status}) - ${policy.category}`);
    });

    // 2. Testar busca de aprova√ß√µes
    console.log('\n‚úÖ 2. Testando busca de aprova√ß√µes...');
    const { data: approvals, error: approvalsError } = await supabase
      .from('policy_approvals')
      .select('id, policy_id, status, comments, created_at')
      .limit(3);

    if (approvalsError) {
      console.error('‚ùå Erro ao buscar aprova√ß√µes:', approvalsError.message);
    } else {
      console.log(`‚úÖ ${approvals.length} aprova√ß√µes encontradas:`);
      approvals.forEach(approval => {
        console.log(`   ‚Ä¢ Status: ${approval.status} - ${approval.comments?.substring(0, 50)}...`);
      });
    }

    // 3. Testar busca de notifica√ß√µes
    console.log('\nüîî 3. Testando busca de notifica√ß√µes...');
    const { data: notifications, error: notificationsError } = await supabase
      .from('policy_notifications')
      .select('id, title, status, priority, created_at')
      .limit(3);

    if (notificationsError) {
      console.error('‚ùå Erro ao buscar notifica√ß√µes:', notificationsError.message);
    } else {
      console.log(`‚úÖ ${notifications.length} notifica√ß√µes encontradas:`);
      notifications.forEach(notification => {
        console.log(`   ‚Ä¢ ${notification.title} (${notification.status}) - Prioridade: ${notification.priority}`);
      });
    }

    // 4. Testar m√©tricas b√°sicas
    console.log('\nüìä 4. Testando m√©tricas b√°sicas...');
    
    // Contar pol√≠ticas por status
    const { data: statusCounts, error: statusError } = await supabase
      .from('policies')
      .select('status')
      .then(({ data, error }) => {
        if (error) return { data: null, error };
        
        const counts = data.reduce((acc, policy) => {
          acc[policy.status] = (acc[policy.status] || 0) + 1;
          return acc;
        }, {});
        
        return { data: counts, error: null };
      });

    if (statusError) {
      console.error('‚ùå Erro ao calcular m√©tricas:', statusError.message);
    } else {
      console.log('‚úÖ M√©tricas por status:');
      Object.entries(statusCounts).forEach(([status, count]) => {
        const statusLabels = {
          'draft': 'üìù Rascunho',
          'review': 'üëÅÔ∏è Em Revis√£o',
          'approved': '‚úÖ Aprovada',
          'published': 'üì¢ Publicada',
          'expired': '‚è∞ Expirada'
        };
        console.log(`   ‚Ä¢ ${statusLabels[status] || status}: ${count}`);
      });
    }

    // 5. Testar busca com filtros (simulando frontend)
    console.log('\nüîç 5. Testando busca com filtros...');
    const { data: filteredPolicies, error: filterError } = await supabase
      .from('policies')
      .select('id, title, status, category')
      .eq('status', 'published')
      .ilike('category', '%Seguran√ßa%');

    if (filterError) {
      console.error('‚ùå Erro ao filtrar pol√≠ticas:', filterError.message);
    } else {
      console.log(`‚úÖ ${filteredPolicies.length} pol√≠ticas publicadas de seguran√ßa encontradas:`);
      filteredPolicies.forEach(policy => {
        console.log(`   ‚Ä¢ ${policy.title} - ${policy.category}`);
      });
    }

    // 6. Testar join com aprova√ß√µes (simulando dashboard)
    console.log('\nüîó 6. Testando join com aprova√ß√µes...');
    const { data: policiesWithApprovals, error: joinError } = await supabase
      .from('policies')
      .select(`
        id,
        title,
        status,
        policy_approvals (
          id,
          status,
          comments
        )
      `)
      .limit(3);

    if (joinError) {
      console.error('‚ùå Erro ao fazer join:', joinError.message);
    } else {
      console.log(`‚úÖ ${policiesWithApprovals.length} pol√≠ticas com aprova√ß√µes:`);
      policiesWithApprovals.forEach(policy => {
        const approvalCount = policy.policy_approvals?.length || 0;
        console.log(`   ‚Ä¢ ${policy.title}: ${approvalCount} aprova√ß√µes`);
      });
    }

    // 7. Resumo final
    console.log('\nüìà Resumo da integra√ß√£o:');
    console.log('================================');
    console.log(`üìã Total de pol√≠ticas: ${policies.length > 0 ? 'OK' : 'ERRO'}`);
    console.log(`‚úÖ Aprova√ß√µes: ${approvals?.length > 0 ? 'OK' : 'ERRO'}`);
    console.log(`üîî Notifica√ß√µes: ${notifications?.length > 0 ? 'OK' : 'ERRO'}`);
    console.log(`üìä M√©tricas: ${statusCounts ? 'OK' : 'ERRO'}`);
    console.log(`üîç Filtros: ${filteredPolicies ? 'OK' : 'ERRO'}`);
    console.log(`üîó Joins: ${policiesWithApprovals ? 'OK' : 'ERRO'}`);

    console.log('\nüéâ Teste de integra√ß√£o conclu√≠do com sucesso!');
    console.log('üîó O m√≥dulo de pol√≠ticas est√° pronto para uso no frontend');
    
    return true;

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    return false;
  }
}

// Executar teste
if (import.meta.url === `file://${process.argv[1]}`) {
  testPolicyModule().then(success => {
    if (success) {
      console.log('\n‚úÖ Todos os testes passaram!');
      process.exit(0);
    } else {
      console.log('\n‚ùå Alguns testes falharam!');
      process.exit(1);
    }
  }).catch(error => {
    console.error('‚ùå Erro fatal:', error.message);
    process.exit(1);
  });
}

export { testPolicyModule };