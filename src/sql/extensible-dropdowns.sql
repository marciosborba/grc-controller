-- ============================================================================\n-- TABELAS PARA DROPDOWNS EXTENSÍVEIS\n-- ============================================================================\n-- Criação das tabelas para suportar dropdowns extensíveis com \"Adicionar Novo\"\n\n-- Tabela de Departamentos\nCREATE TABLE IF NOT EXISTS departments (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,\n  created_by UUID REFERENCES auth.users(id),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  is_active BOOLEAN DEFAULT true,\n  \n  -- Constraints\n  CONSTRAINT departments_name_tenant_unique UNIQUE (name, tenant_id)\n);\n\n-- Tabela de Cargos/Job Titles\nCREATE TABLE IF NOT EXISTS job_titles (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  title VARCHAR(255) NOT NULL,\n  description TEXT,\n  department_id UUID REFERENCES departments(id) ON DELETE SET NULL,\n  tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,\n  created_by UUID REFERENCES auth.users(id),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  is_active BOOLEAN DEFAULT true,\n  \n  -- Constraints\n  CONSTRAINT job_titles_title_tenant_unique UNIQUE (title, tenant_id)\n);\n\n-- Tabela de Frameworks de Compliance\nCREATE TABLE IF NOT EXISTS compliance_frameworks (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  version VARCHAR(50),\n  tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,\n  created_by UUID REFERENCES auth.users(id),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  is_active BOOLEAN DEFAULT true,\n  \n  -- Constraints\n  CONSTRAINT frameworks_name_version_tenant_unique UNIQUE (name, version, tenant_id)\n);\n\n-- Tabela de Categorias de Risco\nCREATE TABLE IF NOT EXISTS risk_categories (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  color VARCHAR(7), -- Hex color code\n  tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,\n  created_by UUID REFERENCES auth.users(id),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  is_active BOOLEAN DEFAULT true,\n  \n  -- Constraints\n  CONSTRAINT risk_categories_name_tenant_unique UNIQUE (name, tenant_id)\n);\n\n-- Tabela de Tipos de Incidente\nCREATE TABLE IF NOT EXISTS incident_types (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  severity_default VARCHAR(50) DEFAULT 'medium', -- low, medium, high, critical\n  tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,\n  created_by UUID REFERENCES auth.users(id),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  is_active BOOLEAN DEFAULT true,\n  \n  -- Constraints\n  CONSTRAINT incident_types_name_tenant_unique UNIQUE (name, tenant_id)\n);\n\n-- ============================================================================\n-- ÍNDICES PARA PERFORMANCE\n-- ============================================================================\n\n-- Departamentos\nCREATE INDEX IF NOT EXISTS idx_departments_tenant_active ON departments(tenant_id, is_active);\nCREATE INDEX IF NOT EXISTS idx_departments_name ON departments(name);\n\n-- Cargos\nCREATE INDEX IF NOT EXISTS idx_job_titles_tenant_active ON job_titles(tenant_id, is_active);\nCREATE INDEX IF NOT EXISTS idx_job_titles_department ON job_titles(department_id);\nCREATE INDEX IF NOT EXISTS idx_job_titles_title ON job_titles(title);\n\n-- Frameworks\nCREATE INDEX IF NOT EXISTS idx_frameworks_tenant_active ON compliance_frameworks(tenant_id, is_active);\nCREATE INDEX IF NOT EXISTS idx_frameworks_name ON compliance_frameworks(name);\n\n-- Categorias de Risco\nCREATE INDEX IF NOT EXISTS idx_risk_categories_tenant_active ON risk_categories(tenant_id, is_active);\nCREATE INDEX IF NOT EXISTS idx_risk_categories_name ON risk_categories(name);\n\n-- Tipos de Incidente\nCREATE INDEX IF NOT EXISTS idx_incident_types_tenant_active ON incident_types(tenant_id, is_active);\nCREATE INDEX IF NOT EXISTS idx_incident_types_name ON incident_types(name);\n\n-- ============================================================================\n-- TRIGGERS PARA UPDATED_AT\n-- ============================================================================\n\n-- Função para atualizar updated_at\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Triggers para cada tabela\nCREATE TRIGGER update_departments_updated_at BEFORE UPDATE ON departments\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_job_titles_updated_at BEFORE UPDATE ON job_titles\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_frameworks_updated_at BEFORE UPDATE ON compliance_frameworks\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_risk_categories_updated_at BEFORE UPDATE ON risk_categories\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_incident_types_updated_at BEFORE UPDATE ON incident_types\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\n-- ============================================================================\n-- RLS (ROW LEVEL SECURITY)\n-- ============================================================================\n\n-- Habilitar RLS\nALTER TABLE departments ENABLE ROW LEVEL SECURITY;\nALTER TABLE job_titles ENABLE ROW LEVEL SECURITY;\nALTER TABLE compliance_frameworks ENABLE ROW LEVEL SECURITY;\nALTER TABLE risk_categories ENABLE ROW LEVEL SECURITY;\nALTER TABLE incident_types ENABLE ROW LEVEL SECURITY;\n\n-- Políticas RLS para Departamentos\nCREATE POLICY \"Users can view departments from their tenant\" ON departments\n    FOR SELECT USING (\n        tenant_id = (SELECT tenant_id FROM profiles WHERE user_id = auth.uid())\n        OR \n        EXISTS (SELECT 1 FROM profiles WHERE user_id = auth.uid() AND is_platform_admin = true)\n    );\n\nCREATE POLICY \"Admins can insert departments\" ON departments\n    FOR INSERT WITH CHECK (\n        EXISTS (\n            SELECT 1 FROM profiles \n            WHERE user_id = auth.uid() \n            AND (is_platform_admin = true OR 'admin' = ANY(roles))\n        )\n    );\n\nCREATE POLICY \"Admins can update departments\" ON departments\n    FOR UPDATE USING (\n        EXISTS (\n            SELECT 1 FROM profiles \n            WHERE user_id = auth.uid() \n            AND (is_platform_admin = true OR 'admin' = ANY(roles))\n        )\n    );\n\n-- Políticas similares para outras tabelas\n-- (Job Titles)\nCREATE POLICY \"Users can view job_titles from their tenant\" ON job_titles\n    FOR SELECT USING (\n        tenant_id = (SELECT tenant_id FROM profiles WHERE user_id = auth.uid())\n        OR \n        EXISTS (SELECT 1 FROM profiles WHERE user_id = auth.uid() AND is_platform_admin = true)\n    );\n\nCREATE POLICY \"Admins can insert job_titles\" ON job_titles\n    FOR INSERT WITH CHECK (\n        EXISTS (\n            SELECT 1 FROM profiles \n            WHERE user_id = auth.uid() \n            AND (is_platform_admin = true OR 'admin' = ANY(roles))\n        )\n    );\n\nCREATE POLICY \"Admins can update job_titles\" ON job_titles\n    FOR UPDATE USING (\n        EXISTS (\n            SELECT 1 FROM profiles \n            WHERE user_id = auth.uid() \n            AND (is_platform_admin = true OR 'admin' = ANY(roles))\n        )\n    );\n\n-- (Compliance Frameworks)\nCREATE POLICY \"Users can view frameworks from their tenant\" ON compliance_frameworks\n    FOR SELECT USING (\n        tenant_id = (SELECT tenant_id FROM profiles WHERE user_id = auth.uid())\n        OR \n        EXISTS (SELECT 1 FROM profiles WHERE user_id = auth.uid() AND is_platform_admin = true)\n    );\n\nCREATE POLICY \"Admins can insert frameworks\" ON compliance_frameworks\n    FOR INSERT WITH CHECK (\n        EXISTS (\n            SELECT 1 FROM profiles \n            WHERE user_id = auth.uid() \n            AND (is_platform_admin = true OR 'admin' = ANY(roles))\n        )\n    );\n\nCREATE POLICY \"Admins can update frameworks\" ON compliance_frameworks\n    FOR UPDATE USING (\n        EXISTS (\n            SELECT 1 FROM profiles \n            WHERE user_id = auth.uid() \n            AND (is_platform_admin = true OR 'admin' = ANY(roles))\n        )\n    );\n\n-- (Risk Categories)\nCREATE POLICY \"Users can view risk_categories from their tenant\" ON risk_categories\n    FOR SELECT USING (\n        tenant_id = (SELECT tenant_id FROM profiles WHERE user_id = auth.uid())\n        OR \n        EXISTS (SELECT 1 FROM profiles WHERE user_id = auth.uid() AND is_platform_admin = true)\n    );\n\nCREATE POLICY \"Admins can insert risk_categories\" ON risk_categories\n    FOR INSERT WITH CHECK (\n        EXISTS (\n            SELECT 1 FROM profiles \n            WHERE user_id = auth.uid() \n            AND (is_platform_admin = true OR 'admin' = ANY(roles))\n        )\n    );\n\nCREATE POLICY \"Admins can update risk_categories\" ON risk_categories\n    FOR UPDATE USING (\n        EXISTS (\n            SELECT 1 FROM profiles \n            WHERE user_id = auth.uid() \n            AND (is_platform_admin = true OR 'admin' = ANY(roles))\n        )\n    );\n\n-- (Incident Types)\nCREATE POLICY \"Users can view incident_types from their tenant\" ON incident_types\n    FOR SELECT USING (\n        tenant_id = (SELECT tenant_id FROM profiles WHERE user_id = auth.uid())\n        OR \n        EXISTS (SELECT 1 FROM profiles WHERE user_id = auth.uid() AND is_platform_admin = true)\n    );\n\nCREATE POLICY \"Admins can insert incident_types\" ON incident_types\n    FOR INSERT WITH CHECK (\n        EXISTS (\n            SELECT 1 FROM profiles \n            WHERE user_id = auth.uid() \n            AND (is_platform_admin = true OR 'admin' = ANY(roles))\n        )\n    );\n\nCREATE POLICY \"Admins can update incident_types\" ON incident_types\n    FOR UPDATE USING (\n        EXISTS (\n            SELECT 1 FROM profiles \n            WHERE user_id = auth.uid() \n            AND (is_platform_admin = true OR 'admin' = ANY(roles))\n        )\n    );\n\n-- ============================================================================\n-- DADOS INICIAIS (SEED DATA)\n-- ============================================================================\n\n-- Inserir departamentos padrão para cada tenant existente\nINSERT INTO departments (name, description, tenant_id, created_by, is_active)\nSELECT \n    dept.name,\n    dept.description,\n    t.id as tenant_id,\n    (SELECT id FROM auth.users LIMIT 1) as created_by,\n    true\nFROM tenants t\nCROSS JOIN (\n    VALUES \n        ('Tecnologia da Informação', 'Departamento responsável pela infraestrutura e sistemas'),\n        ('Segurança da Informação', 'Departamento responsável pela segurança cibernética'),\n        ('Compliance', 'Departamento responsável pela conformidade regulatória'),\n        ('Auditoria', 'Departamento responsável por auditorias internas'),\n        ('Riscos', 'Departamento responsável pela gestão de riscos'),\n        ('Jurídico', 'Departamento jurídico e legal'),\n        ('Recursos Humanos', 'Departamento de gestão de pessoas'),\n        ('Financeiro', 'Departamento financeiro e contábil'),\n        ('Operações', 'Departamento de operações e processos')\n) AS dept(name, description)\nON CONFLICT (name, tenant_id) DO NOTHING;\n\n-- Inserir cargos padrão\nINSERT INTO job_titles (title, description, tenant_id, created_by, is_active)\nSELECT \n    job.title,\n    job.description,\n    t.id as tenant_id,\n    (SELECT id FROM auth.users LIMIT 1) as created_by,\n    true\nFROM tenants t\nCROSS JOIN (\n    VALUES \n        ('Analista de Segurança', 'Responsável por análises de segurança da informação'),\n        ('Especialista em Compliance', 'Especialista em conformidade regulatória'),\n        ('Auditor Interno', 'Responsável por auditorias internas'),\n        ('Analista de Riscos', 'Responsável por análise e gestão de riscos'),\n        ('CISO', 'Chief Information Security Officer'),\n        ('Gerente de TI', 'Gerente do departamento de tecnologia'),\n        ('Coordenador de Compliance', 'Coordenador de atividades de compliance'),\n        ('Analista de Dados', 'Responsável por análise de dados e relatórios')\n) AS job(title, description)\nON CONFLICT (title, tenant_id) DO NOTHING;\n\n-- Inserir frameworks padrão\nINSERT INTO compliance_frameworks (name, description, version, tenant_id, created_by, is_active)\nSELECT \n    fw.name,\n    fw.description,\n    fw.version,\n    t.id as tenant_id,\n    (SELECT id FROM auth.users LIMIT 1) as created_by,\n    true\nFROM tenants t\nCROSS JOIN (\n    VALUES \n        ('ISO 27001', 'Sistema de Gestão de Segurança da Informação', '2013'),\n        ('LGPD', 'Lei Geral de Proteção de Dados', '2020'),\n        ('SOX', 'Sarbanes-Oxley Act', '2002'),\n        ('NIST CSF', 'NIST Cybersecurity Framework', '1.1'),\n        ('PCI DSS', 'Payment Card Industry Data Security Standard', '4.0'),\n        ('COBIT', 'Control Objectives for Information Technologies', '2019')\n) AS fw(name, description, version)\nON CONFLICT (name, version, tenant_id) DO NOTHING;\n\n-- Inserir categorias de risco padrão\nINSERT INTO risk_categories (name, description, color, tenant_id, created_by, is_active)\nSELECT \n    cat.name,\n    cat.description,\n    cat.color,\n    t.id as tenant_id,\n    (SELECT id FROM auth.users LIMIT 1) as created_by,\n    true\nFROM tenants t\nCROSS JOIN (\n    VALUES \n        ('Cibersegurança', 'Riscos relacionados à segurança cibernética', '#ef4444'),\n        ('Operacional', 'Riscos operacionais e de processos', '#f97316'),\n        ('Financeiro', 'Riscos financeiros e de mercado', '#eab308'),\n        ('Compliance', 'Riscos de conformidade regulatória', '#22c55e'),\n        ('Reputacional', 'Riscos à reputação da organização', '#8b5cf6'),\n        ('Estratégico', 'Riscos estratégicos de negócio', '#06b6d4'),\n        ('Tecnológico', 'Riscos relacionados à tecnologia', '#64748b')\n) AS cat(name, description, color)\nON CONFLICT (name, tenant_id) DO NOTHING;\n\n-- Inserir tipos de incidente padrão\nINSERT INTO incident_types (name, description, severity_default, tenant_id, created_by, is_active)\nSELECT \n    inc.name,\n    inc.description,\n    inc.severity_default,\n    t.id as tenant_id,\n    (SELECT id FROM auth.users LIMIT 1) as created_by,\n    true\nFROM tenants t\nCROSS JOIN (\n    VALUES \n        ('Violação de Dados', 'Acesso não autorizado a dados sensíveis', 'high'),\n        ('Malware', 'Infecção por software malicioso', 'medium'),\n        ('Phishing', 'Tentativa de engenharia social', 'medium'),\n        ('Falha de Sistema', 'Indisponibilidade de sistemas críticos', 'high'),\n        ('Acesso Não Autorizado', 'Tentativa de acesso não autorizado', 'medium'),\n        ('Perda de Dados', 'Perda acidental de dados', 'high'),\n        ('Violação de Compliance', 'Não conformidade com regulamentações', 'high')\n) AS inc(name, description, severity_default)\nON CONFLICT (name, tenant_id) DO NOTHING;\n"