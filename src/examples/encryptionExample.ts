/**\n * üîê EXEMPLO PR√ÅTICO DO SISTEMA DE CRIPTOGRAFIA POR TENANT\n * \n * Este arquivo demonstra como usar o sistema de criptografia\n * em diferentes cen√°rios do GRC Controller.\n */\n\nimport { \n  tenantCrypto, \n  encryptPII, \n  decryptPII,\n  encryptFinancial,\n  decryptFinancial,\n  encryptAudit,\n  decryptAudit,\n  EncryptedField,\n  RequiresTenant\n} from '@/utils/tenantCrypto';\nimport { supabase } from '@/integrations/supabase/client';\n\n// ============================================================================\n// EXEMPLO 1: CRIPTOGRAFIA B√ÅSICA\n// ============================================================================\n\nexport async function basicEncryptionExample() {\n  console.log('üîê Exemplo 1: Criptografia B√°sica');\n  \n  const tenantId = '46b1c048-85a1-423b-96fc-776007c8de1f'; // GRC-Controller\n  const sensitiveData = 'Informa√ß√£o confidencial do cliente';\n  \n  try {\n    // Criptografar dados\n    const encryptResult = await tenantCrypto.encrypt(\n      tenantId,\n      sensitiveData,\n      'general'\n    );\n    \n    if (encryptResult.success) {\n      console.log('‚úÖ Dados criptografados com sucesso');\n      console.log(`üìä Performance: ${encryptResult.performanceMs}ms`);\n      \n      // Descriptografar dados\n      const decryptResult = await tenantCrypto.decrypt(\n        tenantId,\n        encryptResult.data!,\n        'general'\n      );\n      \n      if (decryptResult.success) {\n        console.log('‚úÖ Dados descriptografados com sucesso');\n        console.log(`üìä Performance: ${decryptResult.performanceMs}ms`);\n        console.log(`üîç Dados originais: ${decryptResult.data}`);\n      }\n    }\n  } catch (error) {\n    console.error('‚ùå Erro:', error);\n  }\n}\n\n// ============================================================================\n// EXEMPLO 2: DADOS PII (PERSONALLY IDENTIFIABLE INFORMATION)\n// ============================================================================\n\nexport async function piiEncryptionExample() {\n  console.log('\\nüë§ Exemplo 2: Criptografia de Dados PII');\n  \n  const tenantId = '46b1c048-85a1-423b-96fc-776007c8de1f';\n  \n  const userData = {\n    fullName: 'Jo√£o Silva Santos',\n    email: 'joao.silva@empresa.com',\n    phone: '+55 11 99999-9999',\n    cpf: '123.456.789-00'\n  };\n  \n  try {\n    // Criptografar dados PII\n    const encryptedData = {\n      fullName: await encryptPII(tenantId, userData.fullName),\n      email: await encryptPII(tenantId, userData.email),\n      phone: await encryptPII(tenantId, userData.phone),\n      cpf: await encryptPII(tenantId, userData.cpf)\n    };\n    \n    console.log('‚úÖ Dados PII criptografados');\n    \n    // Simular salvamento no banco\n    console.log('üíæ Salvando no banco de dados...');\n    \n    // Descriptografar para exibi√ß√£o\n    const decryptedData = {\n      fullName: await decryptPII(tenantId, encryptedData.fullName!),\n      email: await decryptPII(tenantId, encryptedData.email!),\n      phone: await decryptPII(tenantId, encryptedData.phone!),\n      cpf: await decryptPII(tenantId, encryptedData.cpf!)\n    };\n    \n    console.log('‚úÖ Dados PII descriptografados para exibi√ß√£o');\n    console.log('üìã Dados do usu√°rio:', decryptedData);\n    \n  } catch (error) {\n    console.error('‚ùå Erro no processamento PII:', error);\n  }\n}\n\n// ============================================================================\n// EXEMPLO 3: INTEGRA√á√ÉO COM SUPABASE\n// ============================================================================\n\nexport async function supabaseIntegrationExample() {\n  console.log('\\nüóÑÔ∏è Exemplo 3: Integra√ß√£o com Supabase');\n  \n  const tenantId = '46b1c048-85a1-423b-96fc-776007c8de1f';\n  \n  try {\n    // Dados de um perfil de usu√°rio\n    const profileData = {\n      userId: 'user-123',\n      fullName: 'Maria Oliveira',\n      jobTitle: 'Analista de Compliance',\n      phone: '+55 11 88888-8888',\n      department: 'Governan√ßa e Riscos'\n    };\n    \n    // Criptografar dados sens√≠veis antes de salvar\n    const encryptedProfile = {\n      user_id: profileData.userId,\n      tenant_id: tenantId,\n      full_name_encrypted: await encryptPII(tenantId, profileData.fullName),\n      job_title: profileData.jobTitle, // N√£o sens√≠vel\n      phone_encrypted: await encryptPII(tenantId, profileData.phone),\n      department: profileData.department, // N√£o sens√≠vel\n      created_at: new Date().toISOString()\n    };\n    \n    console.log('‚úÖ Dados preparados para inser√ß√£o no Supabase');\n    \n    // Simular inser√ß√£o (descomente para usar real)\n    /*\n    const { data, error } = await supabase\n      .from('profiles')\n      .insert(encryptedProfile)\n      .select();\n    \n    if (error) {\n      throw new Error(`Erro no Supabase: ${error.message}`);\n    }\n    \n    console.log('‚úÖ Dados salvos no Supabase');\n    */\n    \n    // Simular busca e descriptografia\n    console.log('üîç Simulando busca e descriptografia...');\n    \n    const decryptedProfile = {\n      ...encryptedProfile,\n      full_name: await decryptPII(tenantId, encryptedProfile.full_name_encrypted),\n      phone: await decryptPII(tenantId, encryptedProfile.phone_encrypted)\n    };\n    \n    // Remover campos criptografados da exibi√ß√£o\n    delete decryptedProfile.full_name_encrypted;\n    delete decryptedProfile.phone_encrypted;\n    \n    console.log('‚úÖ Perfil descriptografado:', decryptedProfile);\n    \n  } catch (error) {\n    console.error('‚ùå Erro na integra√ß√£o Supabase:', error);\n  }\n}\n\n// ============================================================================\n// EXEMPLO 4: CLASSE COM DECORATORS\n// ============================================================================\n\nclass AuditRecord {\n  tenantId: string;\n  id: string;\n  \n  @EncryptedField('audit')\n  title: string;\n  \n  @EncryptedField('audit')\n  description: string;\n  \n  @EncryptedField('audit')\n  findings: string;\n  \n  @EncryptedField('audit')\n  recommendations: string;\n  \n  // Campos n√£o criptografados\n  status: string;\n  createdAt: Date;\n  \n  constructor(tenantId: string, data: any) {\n    this.tenantId = tenantId;\n    this.id = data.id || crypto.randomUUID();\n    this.title = data.title;\n    this.description = data.description;\n    this.findings = data.findings;\n    this.recommendations = data.recommendations;\n    this.status = data.status || 'draft';\n    this.createdAt = new Date();\n  }\n  \n  @RequiresTenant\n  async save() {\n    console.log('üíæ Salvando registro de auditoria...');\n    \n    const encryptedData = {\n      id: this.id,\n      tenant_id: this.tenantId,\n      title_encrypted: await encryptAudit(this.tenantId, this.title),\n      description_encrypted: await encryptAudit(this.tenantId, this.description),\n      findings_encrypted: await encryptAudit(this.tenantId, this.findings),\n      recommendations_encrypted: await encryptAudit(this.tenantId, this.recommendations),\n      status: this.status,\n      created_at: this.createdAt.toISOString()\n    };\n    \n    // Simular salvamento\n    console.log('‚úÖ Registro de auditoria salvo com dados criptografados');\n    return encryptedData;\n  }\n  \n  @RequiresTenant\n  static async load(tenantId: string, id: string) {\n    console.log('üîç Carregando registro de auditoria...');\n    \n    // Simular busca no banco\n    const encryptedData = {\n      id,\n      tenant_id: tenantId,\n      title_encrypted: await encryptAudit(tenantId, 'Auditoria de Seguran√ßa'),\n      description_encrypted: await encryptAudit(tenantId, 'Avalia√ß√£o dos controles de seguran√ßa'),\n      findings_encrypted: await encryptAudit(tenantId, 'Encontradas 3 n√£o conformidades'),\n      recommendations_encrypted: await encryptAudit(tenantId, 'Implementar controles adicionais'),\n      status: 'completed',\n      created_at: new Date().toISOString()\n    };\n    \n    // Descriptografar dados\n    const decryptedData = {\n      id: encryptedData.id,\n      title: await decryptAudit(tenantId, encryptedData.title_encrypted),\n      description: await decryptAudit(tenantId, encryptedData.description_encrypted),\n      findings: await decryptAudit(tenantId, encryptedData.findings_encrypted),\n      recommendations: await decryptAudit(tenantId, encryptedData.recommendations_encrypted),\n      status: encryptedData.status\n    };\n    \n    console.log('‚úÖ Registro carregado e descriptografado');\n    return new AuditRecord(tenantId, decryptedData);\n  }\n}\n\nexport async function decoratorExample() {\n  console.log('\\nüé≠ Exemplo 4: Uso com Decorators');\n  \n  const tenantId = '46b1c048-85a1-423b-96fc-776007c8de1f';\n  \n  try {\n    // Criar novo registro\n    const audit = new AuditRecord(tenantId, {\n      title: 'Auditoria de Compliance LGPD',\n      description: 'Verifica√ß√£o da conformidade com a Lei Geral de Prote√ß√£o de Dados',\n      findings: 'Sistema em conformidade com 95% dos requisitos',\n      recommendations: 'Implementar melhorias nos controles de acesso'\n    });\n    \n    // Salvar (criptografado)\n    await audit.save();\n    \n    // Carregar (descriptografado)\n    const loadedAudit = await AuditRecord.load(tenantId, audit.id);\n    \n    console.log('üìã Registro carregado:', {\n      title: loadedAudit.title,\n      status: loadedAudit.status\n    });\n    \n  } catch (error) {\n    console.error('‚ùå Erro no exemplo com decorators:', error);\n  }\n}\n\n// ============================================================================\n// EXEMPLO 5: DADOS FINANCEIROS\n// ============================================================================\n\nexport async function financialDataExample() {\n  console.log('\\nüí∞ Exemplo 5: Criptografia de Dados Financeiros');\n  \n  const tenantId = '46b1c048-85a1-423b-96fc-776007c8de1f';\n  \n  const financialData = {\n    budget: '5000000.00',\n    actualCost: '4750000.00',\n    variance: '250000.00',\n    currency: 'BRL',\n    period: '2024-Q4'\n  };\n  \n  try {\n    // Criptografar valores financeiros\n    const encryptedFinancial = {\n      budget_encrypted: await encryptFinancial(tenantId, financialData.budget),\n      actual_cost_encrypted: await encryptFinancial(tenantId, financialData.actualCost),\n      variance_encrypted: await encryptFinancial(tenantId, financialData.variance),\n      currency: financialData.currency, // N√£o sens√≠vel\n      period: financialData.period // N√£o sens√≠vel\n    };\n    \n    console.log('‚úÖ Dados financeiros criptografados');\n    \n    // Descriptografar para relat√≥rio\n    const decryptedFinancial = {\n      budget: await decryptFinancial(tenantId, encryptedFinancial.budget_encrypted!),\n      actualCost: await decryptFinancial(tenantId, encryptedFinancial.actual_cost_encrypted!),\n      variance: await decryptFinancial(tenantId, encryptedFinancial.variance_encrypted!),\n      currency: encryptedFinancial.currency,\n      period: encryptedFinancial.period\n    };\n    \n    console.log('üìä Relat√≥rio Financeiro:');\n    console.log(`   Or√ßamento: ${decryptedFinancial.currency} ${decryptedFinancial.budget}`);\n    console.log(`   Custo Real: ${decryptedFinancial.currency} ${decryptedFinancial.actualCost}`);\n    console.log(`   Varia√ß√£o: ${decryptedFinancial.currency} ${decryptedFinancial.variance}`);\n    console.log(`   Per√≠odo: ${decryptedFinancial.period}`);\n    \n  } catch (error) {\n    console.error('‚ùå Erro nos dados financeiros:', error);\n  }\n}\n\n// ============================================================================\n// EXEMPLO 6: MONITORAMENTO E ESTAT√çSTICAS\n// ============================================================================\n\nexport async function monitoringExample() {\n  console.log('\\nüìä Exemplo 6: Monitoramento e Estat√≠sticas');\n  \n  const tenantId = '46b1c048-85a1-423b-96fc-776007c8de1f';\n  \n  try {\n    // Obter informa√ß√µes das chaves\n    const keyInfo = await tenantCrypto.getTenantKeyInfo(tenantId);\n    \n    console.log('üîë Informa√ß√µes das Chaves:');\n    keyInfo.forEach(key => {\n      console.log(`   ‚Ä¢ ${key.purpose}: v${key.version} (${key.status})`);\n      console.log(`     Idade: ${key.keyAgeDays} dias`);\n    });\n    \n    // Obter estat√≠sticas de uso\n    const stats = await tenantCrypto.getCryptoStats(tenantId, 7); // √∫ltimos 7 dias\n    \n    console.log('\\nüìà Estat√≠sticas de Uso (7 dias):');\n    if (stats.length > 0) {\n      stats.forEach(stat => {\n        console.log(`   ‚Ä¢ ${stat.operation_type}: ${stat.operation_count} opera√ß√µes`);\n        console.log(`     Sucesso: ${stat.success_count}/${stat.operation_count}`);\n        console.log(`     Performance m√©dia: ${stat.avg_performance_ms}ms`);\n      });\n    } else {\n      console.log('   Nenhuma estat√≠stica dispon√≠vel');\n    }\n    \n    // Obter estat√≠sticas do cache\n    const cacheStats = tenantCrypto.getCacheStats();\n    \n    console.log('\\nüöÄ Estat√≠sticas do Cache:');\n    console.log(`   ‚Ä¢ Tamanho: ${cacheStats.size} entradas`);\n    console.log(`   ‚Ä¢ Hit Rate: ${cacheStats.hitRate.toFixed(1)}%`);\n    \n  } catch (error) {\n    console.error('‚ùå Erro no monitoramento:', error);\n  }\n}\n\n// ============================================================================\n// EXEMPLO 7: ROTA√á√ÉO DE CHAVES\n// ============================================================================\n\nexport async function keyRotationExample() {\n  console.log('\\nüîÑ Exemplo 7: Rota√ß√£o de Chaves');\n  \n  const tenantId = '46b1c048-85a1-423b-96fc-776007c8de1f';\n  \n  try {\n    // Obter vers√£o atual da chave\n    const keysBefore = await tenantCrypto.getTenantKeyInfo(tenantId);\n    const generalKeyBefore = keysBefore.find(k => k.purpose === 'general');\n    \n    console.log(`üîë Vers√£o atual da chave 'general': v${generalKeyBefore?.version}`);\n    \n    // Rotacionar chave\n    console.log('üîÑ Rotacionando chave...');\n    const rotationSuccess = await tenantCrypto.rotateKey(\n      tenantId, \n      'general', \n      'exemplo_rotacao'\n    );\n    \n    if (rotationSuccess) {\n      // Verificar nova vers√£o\n      const keysAfter = await tenantCrypto.getTenantKeyInfo(tenantId);\n      const generalKeyAfter = keysAfter.find(k => k.purpose === 'general');\n      \n      console.log(`‚úÖ Nova vers√£o da chave 'general': v${generalKeyAfter?.version}`);\n      \n      // Testar criptografia com nova chave\n      const testData = 'Teste com nova chave';\n      const encryptResult = await tenantCrypto.encrypt(tenantId, testData, 'general');\n      \n      if (encryptResult.success) {\n        const decryptResult = await tenantCrypto.decrypt(\n          tenantId, \n          encryptResult.data!, \n          'general'\n        );\n        \n        if (decryptResult.success && decryptResult.data === testData) {\n          console.log('‚úÖ Nova chave funcionando corretamente');\n        }\n      }\n    }\n    \n  } catch (error) {\n    console.error('‚ùå Erro na rota√ß√£o de chaves:', error);\n  }\n}\n\n// ============================================================================\n// FUN√á√ÉO PRINCIPAL PARA EXECUTAR TODOS OS EXEMPLOS\n// ============================================================================\n\nexport async function runAllExamples() {\n  console.log('üîê EXEMPLOS DO SISTEMA DE CRIPTOGRAFIA POR TENANT');\n  console.log('='.repeat(60));\n  \n  try {\n    await basicEncryptionExample();\n    await piiEncryptionExample();\n    await supabaseIntegrationExample();\n    await decoratorExample();\n    await financialDataExample();\n    await monitoringExample();\n    await keyRotationExample();\n    \n    console.log('\\nüéâ Todos os exemplos executados com sucesso!');\n    console.log('üìö Consulte TENANT_ENCRYPTION_GUIDE.md para mais informa√ß√µes');\n    \n  } catch (error) {\n    console.error('‚ùå Erro durante execu√ß√£o dos exemplos:', error);\n  }\n}\n\n// Executar exemplos se arquivo for chamado diretamente\nif (typeof window === 'undefined' && require.main === module) {\n  runAllExamples();\n}\n"