import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport {\n  FileText,\n  Search,\n  Filter,\n  Copy,\n  Eye,\n  Download,\n  Star,\n  BookOpen,\n  Shield,\n  Users,\n  DollarSign,\n  Settings,\n  Lightbulb,\n  Globe,\n  Briefcase,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  TrendingUp\n} from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/hooks/use-toast';\nimport { supabase } from '@/integrations/supabase/client';\n\ninterface PolicyTemplate {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  document_type: string;\n  priority: string;\n  metadata: {\n    isTemplate: boolean;\n    framework: string;\n    content: any;\n  };\n  created_at: string;\n  updated_at: string;\n}\n\ninterface PolicyTemplatesProps {\n  onPolicyUpdate?: () => void;\n}\n\nconst PolicyTemplates: React.FC<PolicyTemplatesProps> = ({ onPolicyUpdate }) => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [templates, setTemplates] = useState<PolicyTemplate[]>([]);\n  const [filteredTemplates, setFilteredTemplates] = useState<PolicyTemplate[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [selectedType, setSelectedType] = useState('all');\n  const [selectedTemplate, setSelectedTemplate] = useState<PolicyTemplate | null>(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [showCustomize, setShowCustomize] = useState(false);\n  const [customizationData, setCustomizationData] = useState({\n    title: '',\n    description: '',\n    content: ''\n  });\n\n  // Carregar templates\n  useEffect(() => {\n    loadTemplates();\n  }, []);\n\n  // Filtrar templates\n  useEffect(() => {\n    let filtered = templates;\n\n    if (searchTerm) {\n      filtered = filtered.filter(template =>\n        template.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        template.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        template.category.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter(template => template.category === selectedCategory);\n    }\n\n    if (selectedType !== 'all') {\n      filtered = filtered.filter(template => template.document_type === selectedType);\n    }\n\n    setFilteredTemplates(filtered);\n  }, [templates, searchTerm, selectedCategory, selectedType]);\n\n  const loadTemplates = async () => {\n    setIsLoading(true);\n    try {\n      const { data, error } = await supabase\n        .from('policies')\n        .select('*')\n        .eq('metadata->>isTemplate', 'true')\n        .order('category', { ascending: true })\n        .order('title', { ascending: true });\n\n      if (error) throw error;\n\n      setTemplates(data || []);\n      console.log(`✅ ${data?.length || 0} templates carregados`);\n    } catch (error) {\n      console.error('❌ Erro ao carregar templates:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar templates\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleUseTemplate = async (template: PolicyTemplate) => {\n    try {\n      const newPolicy = {\n        title: customizationData.title || `${template.title} - Customizada`,\n        description: customizationData.description || template.description,\n        category: template.category,\n        document_type: template.document_type,\n        status: 'draft',\n        version: '1.0',\n        priority: template.priority,\n        tenant_id: user?.tenant?.id || user?.tenantId,\n        created_by: user?.id,\n        updated_by: user?.id,\n        owner_id: user?.id,\n        metadata: {\n          ...template.metadata,\n          isTemplate: false,\n          basedOnTemplate: template.id,\n          customContent: customizationData.content || JSON.stringify(template.metadata.content, null, 2)\n        }\n      };\n\n      const { error } = await supabase\n        .from('policies')\n        .insert(newPolicy);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Política criada\",\n        description: \"Política criada com sucesso a partir do template\",\n      });\n\n      setShowCustomize(false);\n      setCustomizationData({ title: '', description: '', content: '' });\n      onPolicyUpdate?.();\n    } catch (error) {\n      console.error('❌ Erro ao criar política:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar política a partir do template\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'segurança da informação':\n      case 'segurança':\n        return Shield;\n      case 'recursos humanos':\n      case 'ética':\n        return Users;\n      case 'financeiro':\n      case 'compliance':\n        return DollarSign;\n      case 'operacional':\n      case 'qualidade':\n        return Settings;\n      case 'tecnologia da informação':\n      case 'inovação':\n        return Lightbulb;\n      case 'ambiental':\n      case 'sustentabilidade':\n        return Globe;\n      case 'estratégico':\n      case 'gestão de riscos':\n        return TrendingUp;\n      default:\n        return Briefcase;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'critical': return 'bg-red-100 text-red-800 border-red-300';\n      case 'high': return 'bg-orange-100 text-orange-800 border-orange-300';\n      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-300';\n      case 'low': return 'bg-green-100 text-green-800 border-green-300';\n      default: return 'bg-gray-100 text-gray-800 border-gray-300';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type.toLowerCase()) {\n      case 'política': return Shield;\n      case 'procedimento': return Settings;\n      case 'manual': return BookOpen;\n      case 'norma': return AlertTriangle;\n      case 'código': return CheckCircle;\n      case 'diretriz': return Clock;\n      default: return FileText;\n    }\n  };\n\n  // Obter categorias e tipos únicos\n  const categories = [...new Set(templates.map(t => t.category))];\n  const documentTypes = [...new Set(templates.map(t => t.document_type))];\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-sm text-muted-foreground\">Carregando templates...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col space-y-4 sm:flex-row sm:justify-between sm:items-start sm:space-y-0\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Templates de Governança</h2>\n          <p className=\"text-muted-foreground\">\n            {templates.length} templates baseados em melhores práticas de mercado\n          </p>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n            <Star className=\"h-3 w-3\" />\n            {templates.length} Templates\n          </Badge>\n        </div>\n      </div>\n\n      {/* Filtros */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Buscar templates...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Categoria\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas as Categorias</SelectItem>\n                  {categories.map(category => (\n                    <SelectItem key={category} value={category}>{category}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              \n              <Select value={selectedType} onValueChange={setSelectedType}>\n                <SelectTrigger className=\"w-[150px]\">\n                  <SelectValue placeholder=\"Tipo\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os Tipos</SelectItem>\n                  {documentTypes.map(type => (\n                    <SelectItem key={type} value={type}>{type}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Grid de Templates */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredTemplates.map((template) => {\n          const CategoryIcon = getCategoryIcon(template.category);\n          const TypeIcon = getTypeIcon(template.document_type);\n          \n          return (\n            <Card key={template.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <CategoryIcon className=\"h-5 w-5 text-primary\" />\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {template.document_type}\n                    </Badge>\n                  </div>\n                  <Badge className={`text-xs ${getPriorityColor(template.priority)}`}>\n                    {template.priority === 'critical' ? 'Crítica' :\n                     template.priority === 'high' ? 'Alta' :\n                     template.priority === 'medium' ? 'Média' : 'Baixa'}\n                  </Badge>\n                </div>\n                \n                <CardTitle className=\"text-lg leading-tight\">\n                  {template.title}\n                </CardTitle>\n                <CardDescription className=\"text-sm\">\n                  {template.description}\n                </CardDescription>\n              </CardHeader>\n              \n              <CardContent className=\"pt-0\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Categoria:</span>\n                    <span className=\"font-medium\">{template.category}</span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Framework:</span>\n                    <span className=\"font-medium text-xs\">{template.metadata.framework}</span>\n                  </div>\n                  \n                  <div className=\"flex gap-2 pt-2\">\n                    <Dialog open={showPreview && selectedTemplate?.id === template.id} onOpenChange={setShowPreview}>\n                      <DialogTrigger asChild>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          className=\"flex-1\"\n                          onClick={() => setSelectedTemplate(template)}\n                        >\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          Visualizar\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                        <DialogHeader>\n                          <DialogTitle>{template.title}</DialogTitle>\n                          <DialogDescription>\n                            {template.description}\n                          </DialogDescription>\n                        </DialogHeader>\n                        \n                        <div className=\"space-y-4\">\n                          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                            <div>\n                              <span className=\"font-medium\">Categoria:</span> {template.category}\n                            </div>\n                            <div>\n                              <span className=\"font-medium\">Tipo:</span> {template.document_type}\n                            </div>\n                            <div>\n                              <span className=\"font-medium\">Framework:</span> {template.metadata.framework}\n                            </div>\n                            <div>\n                              <span className=\"font-medium\">Prioridade:</span> {template.priority}\n                            </div>\n                          </div>\n                          \n                          <div>\n                            <h4 className=\"font-medium mb-2\">Conteúdo do Template:</h4>\n                            <div className=\"bg-muted p-4 rounded-lg\">\n                              <pre className=\"text-sm whitespace-pre-wrap\">\n                                {JSON.stringify(template.metadata.content, null, 2)}\n                              </pre>\n                            </div>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                    \n                    <Dialog open={showCustomize && selectedTemplate?.id === template.id} onOpenChange={setShowCustomize}>\n                      <DialogTrigger asChild>\n                        <Button \n                          size=\"sm\" \n                          className=\"flex-1\"\n                          onClick={() => {\n                            setSelectedTemplate(template);\n                            setCustomizationData({\n                              title: template.title,\n                              description: template.description,\n                              content: JSON.stringify(template.metadata.content, null, 2)\n                            });\n                          }}\n                        >\n                          <Copy className=\"h-4 w-4 mr-1\" />\n                          Usar Template\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-2xl\">\n                        <DialogHeader>\n                          <DialogTitle>Customizar Template</DialogTitle>\n                          <DialogDescription>\n                            Personalize o template antes de criar a política\n                          </DialogDescription>\n                        </DialogHeader>\n                        \n                        <div className=\"space-y-4\">\n                          <div>\n                            <label className=\"text-sm font-medium\">Título</label>\n                            <Input\n                              value={customizationData.title}\n                              onChange={(e) => setCustomizationData(prev => ({ ...prev, title: e.target.value }))}\n                              placeholder=\"Título da nova política\"\n                            />\n                          </div>\n                          \n                          <div>\n                            <label className=\"text-sm font-medium\">Descrição</label>\n                            <Textarea\n                              value={customizationData.description}\n                              onChange={(e) => setCustomizationData(prev => ({ ...prev, description: e.target.value }))}\n                              placeholder=\"Descrição da nova política\"\n                              rows={3}\n                            />\n                          </div>\n                          \n                          <div>\n                            <label className=\"text-sm font-medium\">Conteúdo (JSON)</label>\n                            <Textarea\n                              value={customizationData.content}\n                              onChange={(e) => setCustomizationData(prev => ({ ...prev, content: e.target.value }))}\n                              placeholder=\"Conteúdo customizado em JSON\"\n                              rows={10}\n                              className=\"font-mono text-xs\"\n                            />\n                          </div>\n                          \n                          <div className=\"flex gap-2 pt-4\">\n                            <Button \n                              onClick={() => handleUseTemplate(template)}\n                              className=\"flex-1\"\n                            >\n                              Criar Política\n                            </Button>\n                            <Button \n                              variant=\"outline\" \n                              onClick={() => setShowCustomize(false)}\n                            >\n                              Cancelar\n                            </Button>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {filteredTemplates.length === 0 && (\n        <div className=\"text-center py-12\">\n          <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">Nenhum template encontrado</h3>\n          <p className=\"text-muted-foreground\">\n            Tente ajustar os filtros ou termos de busca.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PolicyTemplates;\n"