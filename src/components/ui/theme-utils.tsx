import React from 'react';\nimport { cn } from '@/lib/utils';\n\n// ============================================================================\n// THEME UTILITY COMPONENTS\n// ============================================================================\n// Componentes utilit√°rios para facilitar o uso do sistema de temas\n// integrado √† paleta configur√°vel\n\n// ============================================================================\n// STATUS INDICATORS\n// ============================================================================\n\ninterface StatusIndicatorProps {\n  status: 'success' | 'warning' | 'danger' | 'info' | 'neutral';\n  children: React.ReactNode;\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nexport const StatusIndicator: React.FC<StatusIndicatorProps> = ({\n  status,\n  children,\n  className,\n  size = 'md'\n}) => {\n  const sizeClasses = {\n    sm: 'text-xs px-2 py-1',\n    md: 'text-sm px-3 py-1.5',\n    lg: 'text-base px-4 py-2'\n  };\n\n  return (\n    <span\n      className={cn(\n        'status-indicator',\n        `status-${status}`,\n        sizeClasses[size],\n        className\n      )}\n    >\n      {children}\n    </span>\n  );\n};\n\n// ============================================================================\n// PRIORITY BADGES\n// ============================================================================\n\ninterface PriorityBadgeProps {\n  priority: 'critical' | 'high' | 'medium' | 'low';\n  children: React.ReactNode;\n  className?: string;\n  showIcon?: boolean;\n}\n\nexport const PriorityBadge: React.FC<PriorityBadgeProps> = ({\n  priority,\n  children,\n  className,\n  showIcon = true\n}) => {\n  const icons = {\n    critical: 'üî¥',\n    high: 'üü†',\n    medium: 'üü°',\n    low: 'üü¢'\n  };\n\n  return (\n    <span\n      className={cn(\n        'priority-badge',\n        `priority-${priority}`,\n        className\n      )}\n    >\n      {showIcon && <span className=\"mr-1\">{icons[priority]}</span>}\n      {children}\n    </span>\n  );\n};\n\n// ============================================================================\n// RISK BADGES\n// ============================================================================\n\ninterface RiskBadgeProps {\n  risk: 'critical' | 'high' | 'medium' | 'low';\n  children: React.ReactNode;\n  className?: string;\n  showIcon?: boolean;\n}\n\nexport const RiskBadge: React.FC<RiskBadgeProps> = ({\n  risk,\n  children,\n  className,\n  showIcon = true\n}) => {\n  const icons = {\n    critical: '‚ö†Ô∏è',\n    high: 'üî∫',\n    medium: '‚ö°',\n    low: '‚úÖ'\n  };\n\n  return (\n    <span\n      className={cn(\n        'risk-badge',\n        risk,\n        className\n      )}\n    >\n      {showIcon && <span className=\"mr-1\">{icons[risk]}</span>}\n      {children}\n    </span>\n  );\n};\n\n// ============================================================================\n// KPI CARD\n// ============================================================================\n\ninterface KPICardProps {\n  title: string;\n  value: string | number;\n  subtitle?: string;\n  trend?: {\n    direction: 'up' | 'down' | 'neutral';\n    value: string;\n  };\n  icon?: React.ReactNode;\n  className?: string;\n  onClick?: () => void;\n}\n\nexport const KPICard: React.FC<KPICardProps> = ({\n  title,\n  value,\n  subtitle,\n  trend,\n  icon,\n  className,\n  onClick\n}) => {\n  const trendIcons = {\n    up: 'üìà',\n    down: 'üìâ',\n    neutral: '‚û°Ô∏è'\n  };\n\n  return (\n    <div\n      className={cn(\n        'kpi-card',\n        onClick && 'cursor-pointer',\n        className\n      )}\n      onClick={onClick}\n    >\n      <div className=\"flex items-center justify-between mb-4\">\n        <div>\n          <p className=\"kpi-label\">{title}</p>\n          <div className=\"flex items-baseline gap-1 mt-1\">\n            <span className=\"kpi-value\">{value}</span>\n            {subtitle && (\n              <span className=\"text-sm text-muted-foreground\">{subtitle}</span>\n            )}\n          </div>\n        </div>\n        {icon && (\n          <div className=\"p-3 bg-primary/10 rounded-lg\">\n            {icon}\n          </div>\n        )}\n      </div>\n      {trend && (\n        <div className={cn(\n          'kpi-trend',\n          trend.direction === 'up' && 'positive',\n          trend.direction === 'down' && 'negative',\n          trend.direction === 'neutral' && 'neutral'\n        )}>\n          <span>{trendIcons[trend.direction]}</span>\n          <span>{trend.value}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// ============================================================================\n// DASHBOARD CARD\n// ============================================================================\n\ninterface DashboardCardProps {\n  children: React.ReactNode;\n  className?: string;\n  interactive?: boolean;\n  onClick?: () => void;\n}\n\nexport const DashboardCard: React.FC<DashboardCardProps> = ({\n  children,\n  className,\n  interactive = false,\n  onClick\n}) => {\n  return (\n    <div\n      className={cn(\n        'dashboard-card',\n        interactive && 'cursor-pointer',\n        className\n      )}\n      onClick={onClick}\n    >\n      {children}\n    </div>\n  );\n};\n\n// ============================================================================\n// RISK ASSESSMENT CARD\n// ============================================================================\n\ninterface RiskAssessmentCardProps {\n  title: string;\n  description?: string;\n  riskLevel: 'critical' | 'high' | 'medium' | 'low';\n  score?: number;\n  lastUpdated?: string;\n  className?: string;\n  interactive?: boolean;\n  onClick?: () => void;\n}\n\nexport const RiskAssessmentCard: React.FC<RiskAssessmentCardProps> = ({\n  title,\n  description,\n  riskLevel,\n  score,\n  lastUpdated,\n  className,\n  interactive = false,\n  onClick\n}) => {\n  return (\n    <div\n      className={cn(\n        'risk-assessment-card',\n        interactive && 'interactive',\n        className\n      )}\n      onClick={onClick}\n    >\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex-1\">\n          <h3 className=\"font-semibold text-foreground mb-1\">{title}</h3>\n          {description && (\n            <p className=\"text-sm text-muted-foreground\">{description}</p>\n          )}\n        </div>\n        <RiskBadge risk={riskLevel}>\n          {riskLevel.charAt(0).toUpperCase() + riskLevel.slice(1)}\n        </RiskBadge>\n      </div>\n      \n      <div className=\"flex items-center justify-between text-sm\">\n        {score !== undefined && (\n          <span className=\"font-medium\">\n            Score: <span className=\"text-foreground\">{score}/10</span>\n          </span>\n        )}\n        {lastUpdated && (\n          <span className=\"text-muted-foreground\">\n            Atualizado: {lastUpdated}\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// ============================================================================\n// VENDOR RISK CARD\n// ============================================================================\n\ninterface VendorRiskCardProps {\n  vendorName: string;\n  riskLevel: 'critical' | 'high' | 'medium' | 'low';\n  status: 'active' | 'pending' | 'inactive' | 'suspended';\n  lastAssessment?: string;\n  nextReview?: string;\n  className?: string;\n  onClick?: () => void;\n}\n\nexport const VendorRiskCard: React.FC<VendorRiskCardProps> = ({\n  vendorName,\n  riskLevel,\n  status,\n  lastAssessment,\n  nextReview,\n  className,\n  onClick\n}) => {\n  return (\n    <div\n      className={cn(\n        'vendor-risk-card',\n        `${riskLevel}-risk`,\n        onClick && 'cursor-pointer',\n        className\n      )}\n      onClick={onClick}\n    >\n      <div className=\"flex items-start justify-between mb-3\">\n        <div>\n          <h3 className=\"font-semibold text-foreground\">{vendorName}</h3>\n          <div className=\"flex items-center gap-2 mt-1\">\n            <RiskBadge risk={riskLevel} showIcon={false}>\n              Risco {riskLevel.charAt(0).toUpperCase() + riskLevel.slice(1)}\n            </RiskBadge>\n            <span className={cn(\n              'vendor-status',\n              status\n            )}>\n              {status.charAt(0).toUpperCase() + status.slice(1)}\n            </span>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"space-y-1 text-sm text-muted-foreground\">\n        {lastAssessment && (\n          <div>√öltimo assessment: {lastAssessment}</div>\n        )}\n        {nextReview && (\n          <div>Pr√≥xima revis√£o: {nextReview}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// ============================================================================\n// COMPLIANCE STATUS\n// ============================================================================\n\ninterface ComplianceStatusProps {\n  framework: string;\n  percentage: number;\n  status: 'high' | 'medium' | 'low';\n  className?: string;\n}\n\nexport const ComplianceStatus: React.FC<ComplianceStatusProps> = ({\n  framework,\n  percentage,\n  status,\n  className\n}) => {\n  return (\n    <div className={cn('compliance-status', `compliance-status-${status}`, className)}>\n      <div className=\"flex items-center justify-between\">\n        <span className=\"font-medium\">{framework}</span>\n        <span className=\"font-bold\">{percentage}%</span>\n      </div>\n      <div className=\"mt-2\">\n        <div className=\"compliance-progress\">\n          <div \n            className={cn('compliance-progress-bar', status)}\n            style={{ width: `${percentage}%` }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// ============================================================================\n// POLICY STATUS\n// ============================================================================\n\ninterface PolicyStatusProps {\n  status: 'active' | 'draft' | 'expired' | 'review';\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const PolicyStatus: React.FC<PolicyStatusProps> = ({\n  status,\n  children,\n  className\n}) => {\n  return (\n    <span\n      className={cn(\n        'policy-status',\n        `policy-status-${status}`,\n        className\n      )}\n    >\n      {children}\n    </span>\n  );\n};\n\n// ============================================================================\n// NOTIFICATION BADGE\n// ============================================================================\n\ninterface NotificationBadgeProps {\n  count: number;\n  type?: 'default' | 'success' | 'warning' | 'info';\n  size?: 'default' | 'large';\n  className?: string;\n}\n\nexport const NotificationBadge: React.FC<NotificationBadgeProps> = ({\n  count,\n  type = 'default',\n  size = 'default',\n  className\n}) => {\n  if (count <= 0) return null;\n\n  return (\n    <span\n      className={cn(\n        'notification-badge',\n        type !== 'default' && type,\n        size === 'large' && 'large',\n        className\n      )}\n    >\n      {count > 99 ? '99+' : count}\n    </span>\n  );\n};\n\n// ============================================================================\n// LOADING SPINNER\n// ============================================================================\n\ninterface LoadingSpinnerProps {\n  size?: 'small' | 'default' | 'large';\n  className?: string;\n}\n\nexport const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({\n  size = 'default',\n  className\n}) => {\n  return (\n    <div\n      className={cn(\n        'loading-spinner',\n        size !== 'default' && size,\n        className\n      )}\n    />\n  );\n};\n\n// ============================================================================\n// SKELETON\n// ============================================================================\n\ninterface SkeletonProps {\n  variant?: 'default' | 'circle' | 'text' | 'title';\n  width?: string | number;\n  height?: string | number;\n  className?: string;\n}\n\nexport const Skeleton: React.FC<SkeletonProps> = ({\n  variant = 'default',\n  width,\n  height,\n  className\n}) => {\n  const style: React.CSSProperties = {};\n  if (width) style.width = typeof width === 'number' ? `${width}px` : width;\n  if (height) style.height = typeof height === 'number' ? `${height}px` : height;\n\n  return (\n    <div\n      className={cn(\n        'skeleton',\n        variant !== 'default' && variant,\n        className\n      )}\n      style={style}\n    />\n  );\n};\n"