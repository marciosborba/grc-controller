import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { supabase } from '@/integrations/supabase/client';\nimport {\n  Brain,\n  Settings,\n  Cpu,\n  MessageSquare,\n  Workflow,\n  BarChart3,\n  Plus,\n  Zap,\n  Database,\n  Lock,\n  Globe,\n  Shield as ShieldIcon,\n  ArrowLeft\n} from 'lucide-react';\nimport { useAuth} from '@/contexts/AuthContextOptimized';\n\ninterface AIProvider {\n  id: string;\n  name: string;\n  provider_type: string;\n  model_name: string;\n  is_active: boolean;\n  is_primary: boolean;\n  total_requests: number;\n  successful_requests: number;\n  failed_requests: number;\n  tokens_used_today: number;\n  cost_usd_today: number;\n}\n\ninterface AIPromptTemplate {\n  id: string;\n  name: string;\n  is_active: boolean;\n  category: string;\n}\n\ninterface AIWorkflow {\n  id: string;\n  name: string;\n  is_active: boolean;\n  status: string;\n}\n\ninterface AIUsageLog {\n  id: string;\n  created_at: string;\n  tokens_input: number;\n  tokens_output: number;\n  cost_usd: number;\n}\n\nconst AIManagerUltimate: React.FC = () => {\n  console.log('üéÜ [AI MANAGER ULTIMATE] === COMPONENTE ULTIMATE CARREGANDO ===');\n  console.log('üï∞Ô∏è [AI MANAGER ULTIMATE] Timestamp:', new Date().toISOString());\n  console.log('üó∫Ô∏è [AI MANAGER ULTIMATE] URL atual:', window.location.pathname);\n  console.log('üîç [AI MANAGER ULTIMATE] Componente AIManagerUltimate iniciando...');\n  \n  const { user } = useAuth();\n  const [activeTab, setActiveTab] = useState('overview');\n  const [providers, setProviders] = useState<AIProvider[]>([]);\n  const [prompts, setPrompts] = useState<AIPromptTemplate[]>([]);\n  const [workflows, setWorkflows] = useState<AIWorkflow[]>([]);\n  const [usageLogs, setUsageLogs] = useState<AIUsageLog[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  // Debug: Log dados do usu√°rio\n  console.log('ü§ñ [AI MANAGER ULTIMATE] Dados do usu√°rio:', {\n    user,\n    isPlatformAdmin: user?.isPlatformAdmin,\n    roles: user?.roles,\n    permissions: user?.permissions,\n    tenantId: user?.tenantId\n  });\n\n  // Verificar se o usu√°rio √© platform admin\n  if (!user?.isPlatformAdmin) {\n    console.log('‚ùå [AI MANAGER ULTIMATE] Usu√°rio n√£o √© Platform Admin');\n    return (\n      <div style={{minHeight: '100vh', background: 'hsl(var(--background))', padding: '2rem'}}>\n        <Card className=\"max-w-md mx-auto mt-20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-red-600\">\n              <ShieldIcon className=\"h-5 w-5\" />\n              Acesso Negado\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              Voc√™ precisa ser Platform Admin para acessar esta p√°gina.\n            </p>\n            <Button onClick={() => window.location.href = '/dashboard'} className=\"w-full\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Voltar ao Dashboard\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n  \n  console.log('‚úÖ [AI MANAGER ULTIMATE] Usu√°rio √© Platform Admin, carregando componente');\n\n  // Carregar todos os dados da IA\n  const loadAIData = async () => {\n    try {\n      console.log('üìä [AI MANAGER ULTIMATE] Iniciando carregamento de dados...');\n      \n      // Carregar provedores\n      const { data: providersData, error: providersError } = await supabase\n        .from('ai_grc_providers')\n        .select('*')\n        .eq('tenant_id', user?.tenantId)\n        .order('priority', { ascending: true });\n\n      if (providersError) {\n        console.warn('‚ö†Ô∏è [AI MANAGER ULTIMATE] Erro ao carregar provedores:', providersError);\n      } else {\n        console.log('‚úÖ [AI MANAGER ULTIMATE] Provedores carregados:', providersData?.length || 0);\n        setProviders(providersData || []);\n      }\n\n      // Carregar prompts (globais e do usu√°rio)\n      const { data: promptsData, error: promptsError } = await supabase\n        .from('ai_grc_prompt_templates')\n        .select('id, name, is_active, category')\n        .order('created_at', { ascending: false });\n\n      if (promptsError) {\n        console.warn('‚ö†Ô∏è [AI MANAGER ULTIMATE] Erro ao carregar prompts:', promptsError);\n      } else {\n        console.log('‚úÖ [AI MANAGER ULTIMATE] Prompts carregados:', promptsData?.length || 0);\n        setPrompts(promptsData || []);\n      }\n\n      // Carregar workflows\n      const { data: workflowsData, error: workflowsError } = await supabase\n        .from('ai_workflows')\n        .select('id, name, is_active, status')\n        .eq('tenant_id', user?.tenantId)\n        .order('created_at', { ascending: false });\n\n      if (workflowsError) {\n        console.warn('‚ö†Ô∏è [AI MANAGER ULTIMATE] Erro ao carregar workflows:', workflowsError);\n      } else {\n        console.log('‚úÖ [AI MANAGER ULTIMATE] Workflows carregados:', workflowsData?.length || 0);\n        setWorkflows(workflowsData || []);\n      }\n\n      // Carregar logs de uso (hoje)\n      const today = new Date().toISOString().split('T')[0];\n      const { data: usageData, error: usageError } = await supabase\n        .from('ai_usage_logs')\n        .select('id, created_at, tokens_input, tokens_output, cost_usd')\n        .eq('tenant_id', user?.tenantId)\n        .gte('created_at', today)\n        .order('created_at', { ascending: false });\n\n      if (usageError) {\n        console.warn('‚ö†Ô∏è [AI MANAGER ULTIMATE] Erro ao carregar logs de uso:', usageError);\n      } else {\n        console.log('‚úÖ [AI MANAGER ULTIMATE] Logs de uso carregados:', usageData?.length || 0);\n        setUsageLogs(usageData || []);\n      }\n\n      console.log('üéâ [AI MANAGER ULTIMATE] Carregamento de dados conclu√≠do!');\n    } catch (error) {\n      console.error('‚ùå [AI MANAGER ULTIMATE] Erro inesperado ao carregar dados:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (user?.tenantId) {\n      loadAIData();\n    }\n  }, [user?.tenantId]);\n\n  // Calcular estat√≠sticas reais\n  const activeProviders = providers.filter(p => p.is_active);\n  const activePrompts = prompts.filter(p => p.is_active);\n  const activeWorkflows = workflows.filter(w => w.is_active && w.status === 'active');\n  \n  // Estat√≠sticas de uso\n  const totalRequests = usageLogs.length;\n  const totalTokens = usageLogs.reduce((sum, log) => sum + ((log.tokens_input || 0) + (log.tokens_output || 0)), 0);\n  const totalCost = usageLogs.reduce((sum, log) => sum + (log.cost_usd || 0), 0);\n  \n  const statsCards = [\n    {\n      title: 'Provedores Ativos',\n      value: activeProviders.length.toString(),\n      description: `${providers.length} total | ${activeProviders.length} ativos`,\n      icon: Cpu,\n      color: 'text-blue-500',\n      bgColor: 'bg-blue-50 dark:bg-blue-950'\n    },\n    {\n      title: 'Prompts Personalizados',\n      value: activePrompts.length.toString(),\n      description: `${prompts.length} total | ${activePrompts.length} ativos`,\n      icon: MessageSquare,\n      color: 'text-purple-500',\n      bgColor: 'bg-purple-50 dark:bg-purple-950'\n    },\n    {\n      title: 'Workflows Ativos',\n      value: activeWorkflows.length.toString(),\n      description: `${workflows.length} total | ${activeWorkflows.length} em execu√ß√£o`,\n      icon: Workflow,\n      color: 'text-green-500',\n      bgColor: 'bg-green-50 dark:bg-green-950'\n    },\n    {\n      title: 'Requisi√ß√µes Hoje',\n      value: totalRequests.toString(),\n      description: `${usageLogs.length} logs | Tokens: ${totalTokens.toLocaleString()} | Custo: $${totalCost.toFixed(2)}`,\n      icon: BarChart3,\n      color: 'text-orange-500',\n      bgColor: 'bg-orange-50 dark:bg-orange-950'\n    }\n  ];\n\n  const quickActions = [\n    {\n      title: 'Configurar Novo Provedor',\n      description: 'Adicionar Claude, OpenAI, ou provedor customizado',\n      icon: Plus,\n      action: () => setActiveTab('providers'),\n      color: 'text-blue-500'\n    },\n    {\n      title: 'Criar Template de Prompt',\n      description: 'Criar prompt especializado para m√≥dulos GRC',\n      icon: MessageSquare,\n      action: () => setActiveTab('prompts'),\n      color: 'text-purple-500'\n    },\n    {\n      title: 'Configurar Workflow',\n      description: 'Automatizar an√°lises e relat√≥rios com IA',\n      icon: Zap,\n      action: () => setActiveTab('workflows'),\n      color: 'text-green-500'\n    },\n    {\n      title: 'Ver Estat√≠sticas',\n      description: 'Monitorar uso, custos e performance',\n      icon: BarChart3,\n      action: () => setActiveTab('usage'),\n      color: 'text-orange-500'\n    }\n  ];\n\n  return (\n    <div style={{minHeight: '100vh', background: 'hsl(var(--background))', padding: '2rem'}}>\n      {console.log('üé® [AI MANAGER ULTIMATE] Renderizando interface...')}\n      \n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"space-y-1\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-primary/10 rounded-lg\">\n              <Brain className=\"h-6 w-6 text-primary\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\">\n                Gest√£o de IA (Ultimate)\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Configura√ß√£o e gerenciamento de assistentes IA especializados em GRC\n              </p>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Button \n            variant=\"outline\" \n            onClick={() => window.location.href = '/dashboard'}\n            className=\"flex items-center gap-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Dashboard\n          </Button>\n          <Badge variant=\"outline\" className=\"bg-orange-50 text-orange-700 border-orange-200\">\n            <ShieldIcon className=\"h-3 w-3 mr-1\" />\n            Platform Admin\n          </Badge>\n          <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n            <Globe className=\"h-3 w-3 mr-1\" />\n            Sistema Ativo\n          </Badge>\n          <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700 border-blue-200\">\n            <Lock className=\"h-3 w-3 mr-1\" />\n            Seguro\n          </Badge>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-6 lg:w-fit\">\n          <TabsTrigger value=\"overview\" className=\"flex items-center space-x-2\">\n            <BarChart3 className=\"h-4 w-4\" />\n            <span className=\"hidden sm:inline\">Vis√£o Geral</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"configuration\" className=\"flex items-center space-x-2\">\n            <Settings className=\"h-4 w-4\" />\n            <span className=\"hidden sm:inline\">Configura√ß√µes</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"providers\" className=\"flex items-center space-x-2\">\n            <Cpu className=\"h-4 w-4\" />\n            <span className=\"hidden sm:inline\">Provedores</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"prompts\" className=\"flex items-center space-x-2\">\n            <MessageSquare className=\"h-4 w-4\" />\n            <span className=\"hidden sm:inline\">Prompts</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"workflows\" className=\"flex items-center space-x-2\">\n            <Workflow className=\"h-4 w-4\" />\n            <span className=\"hidden sm:inline\">Workflows</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"usage\" className=\"flex items-center space-x-2\">\n            <Database className=\"h-4 w-4\" />\n            <span className=\"hidden sm:inline\">Uso</span>\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {console.log('üìä [AI MANAGER ULTIMATE] Renderizando tab Overview...')}\n          \n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {statsCards.map((stat) => (\n              <Card key={stat.title} className=\"grc-card\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-2\">\n                      <p className=\"text-sm font-medium text-muted-foreground\">\n                        {stat.title}\n                      </p>\n                      <p className=\"text-2xl font-bold text-foreground\">\n                        {stat.value}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {stat.description}\n                      </p>\n                    </div>\n                    <div className={`p-3 rounded-full ${stat.bgColor}`}>\n                      <stat.icon className={`h-6 w-6 ${stat.color}`} />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Quick Actions */}\n          <Card className=\"grc-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Zap className=\"h-5 w-5 text-primary\" />\n                <span>A√ß√µes R√°pidas</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {quickActions.map((action) => (\n                  <div\n                    key={action.title}\n                    className=\"flex items-center space-x-4 p-4 border border-border rounded-lg hover:bg-muted/50 cursor-pointer transition-colors\"\n                    onClick={action.action}\n                  >\n                    <div className=\"p-2 bg-muted rounded-lg\">\n                      <action.icon className={`h-5 w-5 ${action.color}`} />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-foreground\">{action.title}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{action.description}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Configuration Tab */}\n        <TabsContent value=\"configuration\">\n          {console.log('‚öôÔ∏è [AI MANAGER ULTIMATE] Renderizando tab Configura√ß√µes...')}\n          <Card className=\"grc-card\">\n            <CardHeader>\n              <CardTitle>Configura√ß√µes do Sistema</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"p-8 text-center\">\n                <Settings className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-medium mb-2\">Configura√ß√µes</h3>\n                <p className=\"text-muted-foreground\">Se√ß√£o em desenvolvimento</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Providers Tab */}\n        <TabsContent value=\"providers\">\n          {console.log('üñ•Ô∏è [AI MANAGER ULTIMATE] Renderizando tab Provedores...')}\n          <Card className=\"grc-card\">\n            <CardHeader>\n              <CardTitle>Provedores de IA</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"p-8 text-center\">\n                <Cpu className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-medium mb-2\">Provedores</h3>\n                <p className=\"text-muted-foreground\">Se√ß√£o em desenvolvimento</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  {providers.length} provedores configurados | {activeProviders.length} ativos\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Prompts Tab */}\n        <TabsContent value=\"prompts\">\n          {console.log('üí¨ [AI MANAGER ULTIMATE] Renderizando tab Prompts...')}\n          <Card className=\"grc-card\">\n            <CardHeader>\n              <CardTitle>Templates de Prompts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"p-8 text-center\">\n                <MessageSquare className=\"h-12 w-12 mx-auto mb-4 text-purple-500\" />\n                <h3 className=\"text-lg font-medium mb-2\">Prompts Personalizados</h3>\n                <p className=\"text-muted-foreground\">Gerencie templates de prompts especializados para GRC</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  {prompts.length} prompts configurados | {activePrompts.length} ativos\n                </p>\n                <div className=\"mt-6\">\n                  <Button className=\"mr-2\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Novo Prompt\n                  </Button>\n                  <Button variant=\"outline\">\n                    <MessageSquare className=\"h-4 w-4 mr-2\" />\n                    Importar Templates\n                  </Button>\n                </div>\n                \n                {/* Lista de Prompts */}\n                {prompts.length > 0 && (\n                  <div className=\"mt-8\">\n                    <h4 className=\"text-md font-medium mb-4 text-left\">Prompts Dispon√≠veis</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      {prompts.slice(0, 6).map((prompt) => (\n                        <div key={prompt.id} className=\"p-4 border border-border rounded-lg text-left\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h5 className=\"font-medium text-sm\">{prompt.name}</h5>\n                            <Badge variant={prompt.is_active ? \"default\" : \"secondary\"} className=\"text-xs\">\n                              {prompt.is_active ? \"Ativo\" : \"Inativo\"}\n                            </Badge>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Categoria: {prompt.category || 'Geral'}\n                          </p>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Workflows Tab */}\n        <TabsContent value=\"workflows\">\n          {console.log('üîÑ [AI MANAGER ULTIMATE] Renderizando tab Workflows...')}\n          <Card className=\"grc-card\">\n            <CardHeader>\n              <CardTitle>Workflows de Automa√ß√£o</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"p-8 text-center\">\n                <Workflow className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-medium mb-2\">Workflows</h3>\n                <p className=\"text-muted-foreground\">Se√ß√£o em desenvolvimento</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  {workflows.length} workflows configurados | {activeWorkflows.length} ativos\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Usage Tab */}\n        <TabsContent value=\"usage\">\n          {console.log('üìà [AI MANAGER ULTIMATE] Renderizando tab Uso...')}\n          <Card className=\"grc-card\">\n            <CardHeader>\n              <CardTitle>Estat√≠sticas de Uso</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"p-8 text-center\">\n                <Database className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-medium mb-2\">Uso e Estat√≠sticas</h3>\n                <p className=\"text-muted-foreground\">Monitoramento de uso e custos</p>\n                <div className=\"grid grid-cols-3 gap-4 mt-6\">\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-foreground\">{totalRequests}</p>\n                    <p className=\"text-sm text-muted-foreground\">Requisi√ß√µes</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-foreground\">{totalTokens.toLocaleString()}</p>\n                    <p className=\"text-sm text-muted-foreground\">Tokens</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-foreground\">${totalCost.toFixed(2)}</p>\n                    <p className=\"text-sm text-muted-foreground\">Custo</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n      \n      {console.log('‚úÖ [AI MANAGER ULTIMATE] Interface renderizada com sucesso!')}\n    </div>\n  );\n};\n\nexport default AIManagerUltimate;