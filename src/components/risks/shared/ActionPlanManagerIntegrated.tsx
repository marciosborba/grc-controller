import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { \n  Target,\n  Plus,\n  Calendar,\n  User,\n  CheckCircle,\n  Clock,\n  AlertTriangle,\n  Play,\n  Pause,\n  Square,\n  Edit,\n  Trash2,\n  Eye,\n  Filter,\n  Search,\n  BarChart3,\n  TrendingUp,\n  Users,\n  FileText,\n  Brain,\n  Zap,\n  Shield,\n  Star,\n  Flag,\n  ArrowRight,\n  MoreHorizontal\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport type { Risk } from '@/types/risk-management';\n\ninterface ActionPlan {\n  id: string;\n  riskId: string;\n  riskName: string;\n  title: string;\n  description: string;\n  objective: string;\n  owner: string;\n  assignedTo: string[];\n  startDate: string;\n  dueDate: string;\n  status: 'planned' | 'in_progress' | 'completed' | 'overdue' | 'cancelled';\n  priority: 'high' | 'medium' | 'low';\n  progress: number;\n  budget: number;\n  actualCost: number;\n  activities: Activity[];\n  milestones: Milestone[];\n  dependencies: string[];\n  risks: string[];\n  kpis: KPI[];\n  alexRiskSuggested: boolean;\n  category: string;\n  methodology: string;\n  approvalStatus: 'pending' | 'approved' | 'rejected';\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Activity {\n  id: string;\n  title: string;\n  description: string;\n  assignedTo: string;\n  startDate: string;\n  dueDate: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'blocked';\n  progress: number;\n  dependencies: string[];\n}\n\ninterface Milestone {\n  id: string;\n  title: string;\n  description: string;\n  dueDate: string;\n  status: 'pending' | 'achieved' | 'missed';\n  criteria: string[];\n}\n\ninterface KPI {\n  id: string;\n  name: string;\n  target: number;\n  current: number;\n  unit: string;\n  trend: 'up' | 'down' | 'stable';\n}\n\ninterface ActionPlanManagerIntegratedProps {\n  risks: Risk[];\n  onCreatePlan: (plan: ActionPlan) => void;\n  onUpdatePlan: (planId: string, updates: Partial<ActionPlan>) => void;\n}\n\nexport const ActionPlanManagerIntegrated: React.FC<ActionPlanManagerIntegratedProps> = ({\n  risks,\n  onCreatePlan,\n  onUpdatePlan\n}) => {\n  const [actionPlans, setActionPlans] = useState<ActionPlan[]>([]);\n  const [selectedPlan, setSelectedPlan] = useState<ActionPlan | null>(null);\n  const [isCreating, setIsCreating] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n  const [filterPriority, setFilterPriority] = useState<string>('all');\n  const [viewMode, setViewMode] = useState<'list' | 'kanban' | 'timeline'>('list');\n  const [isLoading, setIsLoading] = useState(true);\n  \n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadActionPlans();\n  }, []);\n\n  const loadActionPlans = async () => {\n    setIsLoading(true);\n    \n    // Simular carregamento\n    setTimeout(() => {\n      const mockPlans: ActionPlan[] = [\n        {\n          id: 'plan-001',\n          riskId: 'risk-001',\n          riskName: 'Vulnerabilidade Crítica de Segurança',\n          title: 'Implementação de Controles de Segurança',\n          description: 'Plano abrangente para mitigar vulnerabilidades críticas identificadas',\n          objective: 'Reduzir o risco de segurança de Alto para Baixo em 90 dias',\n          owner: 'João Silva',\n          assignedTo: ['Equipe de Segurança', 'TI', 'Compliance'],\n          startDate: '2024-12-01',\n          dueDate: '2024-03-01',\n          status: 'in_progress',\n          priority: 'high',\n          progress: 35,\n          budget: 150000,\n          actualCost: 45000,\n          activities: [\n            {\n              id: 'act-001',\n              title: 'Auditoria de Segurança',\n              description: 'Avaliação completa da infraestrutura',\n              assignedTo: 'Equipe de Segurança',\n              startDate: '2024-12-01',\n              dueDate: '2024-12-15',\n              status: 'completed',\n              progress: 100,\n              dependencies: []\n            },\n            {\n              id: 'act-002',\n              title: 'Implementação de Firewall',\n              description: 'Configuração de novo firewall corporativo',\n              assignedTo: 'TI',\n              startDate: '2024-12-16',\n              dueDate: '2024-01-15',\n              status: 'in_progress',\n              progress: 60,\n              dependencies: ['act-001']\n            }\n          ],\n          milestones: [\n            {\n              id: 'mile-001',\n              title: 'Auditoria Concluída',\n              description: 'Relatório de auditoria aprovado',\n              dueDate: '2024-12-15',\n              status: 'achieved',\n              criteria: ['Relatório entregue', 'Vulnerabilidades mapeadas']\n            }\n          ],\n          dependencies: [],\n          risks: ['Resistência da equipe', 'Complexidade técnica'],\n          kpis: [\n            {\n              id: 'kpi-001',\n              name: 'Vulnerabilidades Corrigidas',\n              target: 100,\n              current: 35,\n              unit: '%',\n              trend: 'up'\n            }\n          ],\n          alexRiskSuggested: true,\n          category: 'security',\n          methodology: 'NIST Cybersecurity Framework',\n          approvalStatus: 'approved',\n          createdAt: '2024-11-30',\n          updatedAt: '2024-12-15'\n        },\n        {\n          id: 'plan-002',\n          riskId: 'risk-002',\n          riskName: 'Falha de Sistema Crítico',\n          title: 'Plano de Continuidade de Negócios',\n          description: 'Implementação de redundância e backup para sistemas críticos',\n          objective: 'Garantir 99.9% de disponibilidade dos sistemas',\n          owner: 'Maria Santos',\n          assignedTo: ['TI', 'Operações'],\n          startDate: '2024-11-15',\n          dueDate: '2024-02-15',\n          status: 'in_progress',\n          priority: 'high',\n          progress: 55,\n          budget: 200000,\n          actualCost: 85000,\n          activities: [],\n          milestones: [],\n          dependencies: [],\n          risks: [],\n          kpis: [\n            {\n              id: 'kpi-002',\n              name: 'Uptime do Sistema',\n              target: 99.9,\n              current: 98.5,\n              unit: '%',\n              trend: 'up'\n            }\n          ],\n          alexRiskSuggested: false,\n          category: 'operational',\n          methodology: 'ISO 22301',\n          approvalStatus: 'approved',\n          createdAt: '2024-11-10',\n          updatedAt: '2024-12-10'\n        },\n        {\n          id: 'plan-003',\n          riskId: 'risk-003',\n          riskName: 'Não Conformidade LGPD',\n          title: 'Programa de Conformidade LGPD',\n          description: 'Adequação completa aos requisitos da LGPD',\n          objective: 'Atingir 100% de conformidade com LGPD',\n          owner: 'Pedro Costa',\n          assignedTo: ['Jurídico', 'TI', 'RH'],\n          startDate: '2024-10-01',\n          dueDate: '2024-12-31',\n          status: 'overdue',\n          priority: 'high',\n          progress: 75,\n          budget: 80000,\n          actualCost: 65000,\n          activities: [],\n          milestones: [],\n          dependencies: [],\n          risks: [],\n          kpis: [\n            {\n              id: 'kpi-003',\n              name: 'Conformidade LGPD',\n              target: 100,\n              current: 75,\n              unit: '%',\n              trend: 'up'\n            }\n          ],\n          alexRiskSuggested: true,\n          category: 'compliance',\n          methodology: 'LGPD Framework',\n          approvalStatus: 'approved',\n          createdAt: '2024-09-25',\n          updatedAt: '2024-12-01'\n        }\n      ];\n      \n      setActionPlans(mockPlans);\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const filteredPlans = actionPlans.filter(plan => {\n    const matchesSearch = plan.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         plan.riskName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         plan.owner.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = filterStatus === 'all' || plan.status === filterStatus;\n    const matchesPriority = filterPriority === 'all' || plan.priority === filterPriority;\n    \n    return matchesSearch && matchesStatus && matchesPriority;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'planned': return 'bg-blue-100 text-blue-800';\n      case 'in_progress': return 'bg-yellow-100 text-yellow-800';\n      case 'completed': return 'bg-green-100 text-green-800';\n      case 'overdue': return 'bg-red-100 text-red-800';\n      case 'cancelled': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'bg-red-100 text-red-800';\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\n      case 'low': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'planned': return Clock;\n      case 'in_progress': return Play;\n      case 'completed': return CheckCircle;\n      case 'overdue': return AlertTriangle;\n      case 'cancelled': return Square;\n      default: return Clock;\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pt-BR');\n  };\n\n  const calculateDaysRemaining = (dueDate: string) => {\n    const today = new Date();\n    const due = new Date(dueDate);\n    const diffTime = due.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Carregando planos de ação...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card className=\"bg-gradient-to-r from-amber-50 to-orange-50 border-amber-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Target className=\"h-6 w-6 text-amber-600\" />\n            <span>Gerenciador de Planos de Ação</span>\n            <Badge variant=\"secondary\" className=\"bg-amber-100 text-amber-700\">\n              {actionPlans.length} planos ativos\n            </Badge>\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Gestão completa de planos de ação para tratamento de riscos corporativos\n          </p>\n        </CardHeader>\n      </Card>\n\n      {/* Controles e Filtros */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Button \n                onClick={() => setIsCreating(true)}\n                className=\"bg-gradient-to-r from-amber-500 to-orange-600 hover:from-amber-600 hover:to-orange-700 text-white\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Novo Plano de Ação\n              </Button>\n              \n              <div className=\"flex items-center space-x-1\">\n                <Button \n                  variant={viewMode === 'list' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('list')}\n                >\n                  Lista\n                </Button>\n                <Button \n                  variant={viewMode === 'kanban' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('kanban')}\n                >\n                  Kanban\n                </Button>\n                <Button \n                  variant={viewMode === 'timeline' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('timeline')}\n                >\n                  Timeline\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"outline\" className=\"text-xs\">\n                <Brain className=\"h-3 w-3 mr-1\" />\n                {actionPlans.filter(p => p.alexRiskSuggested).length} sugeridos por Alex Risk\n              </Badge>\n              \n              <Badge variant=\"outline\" className=\"text-xs\">\n                <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                {actionPlans.filter(p => p.status === 'overdue').length} em atraso\n              </Badge>\n            </div>\n          </div>\n          \n          {/* Filtros */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Buscar planos...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <select \n              value={filterStatus} \n              onChange={(e) => setFilterStatus(e.target.value)}\n              className=\"px-3 py-2 border border-input rounded-md bg-background text-sm\"\n            >\n              <option value=\"all\">Todos os Status</option>\n              <option value=\"planned\">Planejado</option>\n              <option value=\"in_progress\">Em Progresso</option>\n              <option value=\"completed\">Concluído</option>\n              <option value=\"overdue\">Em Atraso</option>\n              <option value=\"cancelled\">Cancelado</option>\n            </select>\n            \n            <select \n              value={filterPriority} \n              onChange={(e) => setFilterPriority(e.target.value)}\n              className=\"px-3 py-2 border border-input rounded-md bg-background text-sm\"\n            >\n              <option value=\"all\">Todas as Prioridades</option>\n              <option value=\"high\">Alta</option>\n              <option value=\"medium\">Média</option>\n              <option value=\"low\">Baixa</option>\n            </select>\n            \n            <Button variant=\"outline\" size=\"sm\">\n              <Filter className=\"h-4 w-4 mr-1\" />\n              Mais Filtros\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Métricas Rápidas */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <Target className=\"h-8 w-8 text-amber-500\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Total de Planos</p>\n                <p className=\"text-2xl font-bold\">{actionPlans.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <Play className=\"h-8 w-8 text-yellow-500\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Em Progresso</p>\n                <p className=\"text-2xl font-bold\">\n                  {actionPlans.filter(p => p.status === 'in_progress').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <AlertTriangle className=\"h-8 w-8 text-red-500\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Em Atraso</p>\n                <p className=\"text-2xl font-bold\">\n                  {actionPlans.filter(p => p.status === 'overdue').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Concluídos</p>\n                <p className=\"text-2xl font-bold\">\n                  {actionPlans.filter(p => p.status === 'completed').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Lista de Planos */}\n      <div className=\"space-y-4\">\n        {filteredPlans.map((plan) => {\n          const StatusIcon = getStatusIcon(plan.status);\n          const daysRemaining = calculateDaysRemaining(plan.dueDate);\n          \n          return (\n            <Card \n              key={plan.id} \n              className=\"hover:shadow-lg transition-all cursor-pointer\"\n              onClick={() => setSelectedPlan(plan)}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <div className={`p-2 rounded-lg ${getStatusColor(plan.status).replace('text-', 'text-white bg-').split(' ')[0]}`}>\n                        <StatusIcon className=\"h-4 w-4 text-white\" />\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-semibold text-lg truncate\">{plan.title}</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Risco: {plan.riskName}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      {plan.description}\n                    </p>\n                    \n                    <div className=\"flex items-center space-x-4 text-sm\">\n                      <div className=\"flex items-center space-x-1\">\n                        <User className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>{plan.owner}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-1\">\n                        <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>{formatDate(plan.dueDate)}</span>\n                        {daysRemaining < 0 && (\n                          <Badge variant=\"destructive\" className=\"text-xs ml-1\">\n                            {Math.abs(daysRemaining)} dias em atraso\n                          </Badge>\n                        )}\n                        {daysRemaining >= 0 && daysRemaining <= 7 && (\n                          <Badge variant=\"secondary\" className=\"text-xs ml-1 bg-yellow-100 text-yellow-800\">\n                            {daysRemaining} dias restantes\n                          </Badge>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-1\">\n                        <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>{plan.progress}% concluído</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex flex-col items-end space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge className={`text-xs ${getPriorityColor(plan.priority)}`}>\n                        {plan.priority}\n                      </Badge>\n                      \n                      <Badge className={`text-xs ${getStatusColor(plan.status)}`}>\n                        {plan.status}\n                      </Badge>\n                      \n                      {plan.alexRiskSuggested && (\n                        <Badge variant=\"secondary\" className=\"text-xs bg-purple-100 text-purple-700\">\n                          <Brain className=\"h-3 w-3 mr-1\" />\n                          Alex IA\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    <div className=\"text-right text-sm text-muted-foreground\">\n                      <p>Orçamento: {formatCurrency(plan.budget)}</p>\n                      <p>Gasto: {formatCurrency(plan.actualCost)}</p>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Barra de Progresso */}\n                <div className=\"mb-4\">\n                  <div className=\"flex items-center justify-between text-sm mb-1\">\n                    <span>Progresso</span>\n                    <span>{plan.progress}%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-gradient-to-r from-amber-500 to-orange-600 h-2 rounded-full transition-all\"\n                      style={{ width: `${plan.progress}%` }}\n                    ></div>\n                  </div>\n                </div>\n                \n                {/* KPIs */}\n                {plan.kpis.length > 0 && (\n                  <div className=\"border-t pt-4\">\n                    <h4 className=\"text-sm font-medium mb-2\">KPIs Principais</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                      {plan.kpis.slice(0, 3).map((kpi) => (\n                        <div key={kpi.id} className=\"bg-gray-50 p-3 rounded-lg\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-xs font-medium\">{kpi.name}</span>\n                            <TrendingUp className={`h-3 w-3 ${\n                              kpi.trend === 'up' ? 'text-green-500' :\n                              kpi.trend === 'down' ? 'text-red-500' : 'text-gray-500'\n                            }`} />\n                          </div>\n                          <div className=\"mt-1\">\n                            <span className=\"text-lg font-bold\">{kpi.current}</span>\n                            <span className=\"text-xs text-muted-foreground\">/{kpi.target} {kpi.unit}</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                \n                {/* Ações */}\n                <div className=\"flex items-center justify-between mt-4 pt-4 border-t\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Edit className=\"h-3 w-3 mr-1\" />\n                      Editar\n                    </Button>\n                    \n                    <Button variant=\"outline\" size=\"sm\">\n                      <Eye className=\"h-3 w-3 mr-1\" />\n                      Detalhes\n                    </Button>\n                    \n                    <Button variant=\"outline\" size=\"sm\">\n                      <FileText className=\"h-3 w-3 mr-1\" />\n                      Relatório\n                    </Button>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-1\">\n                    <span className=\"text-xs text-muted-foreground\">\n                      {plan.activities.length} atividades\n                    </span>\n                    <ArrowRight className=\"h-3 w-3 text-muted-foreground\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n        \n        {filteredPlans.length === 0 && (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <Target className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">Nenhum plano de ação encontrado</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Tente ajustar os filtros ou criar um novo plano de ação\n              </p>\n              <Button \n                onClick={() => setIsCreating(true)}\n                className=\"bg-gradient-to-r from-amber-500 to-orange-600 hover:from-amber-600 hover:to-orange-700 text-white\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Criar Primeiro Plano\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n};