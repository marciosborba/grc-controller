import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { useNavigate } from 'react-router-dom';
import { 
  FileText, CheckCircle, Play, Activity, Award, BookOpen, AlertCircle, 
  ArrowRight, Settings, Target, BarChart3, List, Search, Filter, 
  ChevronDown, ChevronUp, Download, Trash2, Edit, Eye, Plus,
  TrendingUp, Clock, Users, Shield, Zap, Calendar
} from 'lucide-react';
import { useAssessments, useAssessmentMetrics } from '@/hooks/useAssessments';
import { useFrameworks } from '@/hooks/useFrameworks';
import type { AssessmentStatus, FrameworkType } from '@/types/assessment';\n\ninterface AssessmentsDashboardProProps {\n  className?: string;\n}\n\nexport default function AssessmentsDashboardPro({ className }: AssessmentsDashboardProProps) {\n  const navigate = useNavigate();\n  \n  // Estados para filtros\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState<AssessmentStatus | 'all'>('all');\n  const [frameworkTypeFilter, setFrameworkTypeFilter] = useState<FrameworkType | 'all'>('all');\n  const [selectedAssessments, setSelectedAssessments] = useState<string[]>([]);\n  const [expandedCard, setExpandedCard] = useState<string | null>(null);\n\n  // Hooks para dados\n  const { \n    assessments, \n    isLoading: assessmentsLoading,\n    createAssessment,\n    updateAssessment,\n    deleteAssessment,\n    isCreating,\n    isUpdating,\n    isDeleting\n  } = useAssessments({\n    filters: {\n      search: searchTerm || undefined,\n      status: statusFilter !== 'all' ? [statusFilter] : undefined,\n      framework_type: frameworkTypeFilter !== 'all' ? [frameworkTypeFilter] : undefined\n    },\n    include_framework: true\n  });\n\n  const { metrics, isLoading: metricsLoading } = useAssessmentMetrics();\n  const { frameworks, isLoading: frameworksLoading } = useFrameworks();\n\n  // Filtros aplicados\n  const filteredAssessments = assessments.filter(assessment => {\n    const matchesSearch = !searchTerm || \n      assessment.titulo.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === 'all' || \n      assessment.status === statusFilter;\n\n    const matchesFrameworkType = frameworkTypeFilter === 'all' || \n      assessment.framework?.tipo_framework === frameworkTypeFilter;\n\n    return matchesSearch && matchesStatus && matchesFrameworkType;\n  });\n\n  // Funções auxiliares\n  const getStatusColor = (status: AssessmentStatus) => {\n    const colors = {\n      'concluido': 'bg-green-100 text-green-800 border-green-200',\n      'em_andamento': 'bg-blue-100 text-blue-800 border-blue-200',\n      'em_revisao': 'bg-yellow-100 text-yellow-800 border-yellow-200',\n      'iniciado': 'bg-blue-100 text-blue-800 border-blue-200',\n      'planejado': 'bg-gray-100 text-gray-800 border-gray-200',\n      'cancelado': 'bg-red-100 text-red-800 border-red-200'\n    };\n    return colors[status] || 'bg-gray-100 text-gray-800 border-gray-200';\n  };\n\n  const getMaturityLevel = (percentage: number) => {\n    if (percentage >= 80) return { level: 'Otimizado', color: 'text-green-600' };\n    if (percentage >= 60) return { level: 'Gerenciado', color: 'text-blue-600' };\n    if (percentage >= 40) return { level: 'Definido', color: 'text-yellow-600' };\n    if (percentage >= 20) return { level: 'Inicial', color: 'text-orange-600' };\n    return { level: 'Inexistente', color: 'text-red-600' };\n  };\n\n  const toggleCardExpansion = (cardId: string) => {\n    setExpandedCard(expandedCard === cardId ? null : cardId);\n  };\n\n  const toggleAssessmentSelection = (assessmentId: string) => {\n    setSelectedAssessments(prev => \n      prev.includes(assessmentId) \n        ? prev.filter(id => id !== assessmentId)\n        : [...prev, assessmentId]\n    );\n  };\n\n  const toggleSelectAll = () => {\n    if (selectedAssessments.length === filteredAssessments.length) {\n      setSelectedAssessments([]);\n    } else {\n      setSelectedAssessments(filteredAssessments.map(a => a.id));\n    }\n  };\n\n  const clearFilters = () => {\n    setSearchTerm('');\n    setStatusFilter('all');\n    setFrameworkTypeFilter('all');\n  };\n\n  if (assessmentsLoading || metricsLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n        <p className=\"ml-4\">Carregando assessments...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header Profissional com Gradiente */}\n      <div className=\"relative overflow-hidden rounded-xl bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-700 p-8 text-white\">\n        <div className=\"absolute inset-0 bg-black/10\"></div>\n        <div className=\"absolute top-0 right-0 -mt-4 -mr-4 h-32 w-32 rounded-full bg-white/10\"></div>\n        <div className=\"absolute bottom-0 left-0 -mb-8 -ml-8 h-24 w-24 rounded-full bg-white/5\"></div>\n        \n        <div className=\"relative\">\n          <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-3 mb-3\">\n                <div className=\"p-2 bg-white/20 rounded-lg\">\n                  <Shield className=\"h-6 w-6\" />\n                </div>\n                <h1 className=\"text-4xl font-bold\">Assessments</h1>\n              </div>\n              <p className=\"text-blue-100 text-lg mb-4\">\n                Central de Avaliação de Maturidade e Compliance\n              </p>\n              \n              {/* Métricas rápidas */}\n              <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 text-sm\">\n                <div className=\"flex items-center gap-2 bg-white/10 rounded-lg p-3\">\n                  <Activity className=\"h-4 w-4\" />\n                  <div>\n                    <p className=\"text-blue-100\">Total</p>\n                    <p className=\"font-semibold\">{metrics?.total_assessments || 0}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2 bg-white/10 rounded-lg p-3\">\n                  <Play className=\"h-4 w-4\" />\n                  <div>\n                    <p className=\"text-blue-100\">Ativos</p>\n                    <p className=\"font-semibold\">{metrics?.active_assessments || 0}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2 bg-white/10 rounded-lg p-3\">\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <div>\n                    <p className=\"text-blue-100\">Concluídos</p>\n                    <p className=\"font-semibold\">{metrics?.completed_assessments || 0}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2 bg-white/10 rounded-lg p-3\">\n                  <Award className=\"h-4 w-4\" />\n                  <div>\n                    <p className=\"text-blue-100\">Maturidade</p>\n                    <p className=\"font-semibold\">{metrics?.average_maturity || 0}%</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Ações principais */}\n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <Button \n                onClick={() => navigate('/assessments/frameworks')}\n                variant=\"secondary\"\n                className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\"\n              >\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Gerenciar Frameworks\n              </Button>\n              <Button \n                onClick={() => navigate('/assessments/execution')}\n                className=\"bg-white text-blue-600 hover:bg-white/90 font-semibold\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Novo Assessment\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filtros Avançados */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col lg:flex-row gap-4\">\n            {/* Busca */}\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Buscar assessments pelo título...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            \n            {/* Filtro de Status */}\n            <Select value={statusFilter} onValueChange={(value) => setStatusFilter(value as AssessmentStatus | 'all')}>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos os Status</SelectItem>\n                <SelectItem value=\"planejado\">Planejado</SelectItem>\n                <SelectItem value=\"iniciado\">Iniciado</SelectItem>\n                <SelectItem value=\"em_andamento\">Em Andamento</SelectItem>\n                <SelectItem value=\"em_revisao\">Em Revisão</SelectItem>\n                <SelectItem value=\"concluido\">Concluído</SelectItem>\n                <SelectItem value=\"cancelado\">Cancelado</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            {/* Filtro de Framework */}\n            <Select value={frameworkTypeFilter} onValueChange={(value) => setFrameworkTypeFilter(value as FrameworkType | 'all')}>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Framework\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos os Frameworks</SelectItem>\n                <SelectItem value=\"ISO27001\">ISO 27001</SelectItem>\n                <SelectItem value=\"SOX\">SOX</SelectItem>\n                <SelectItem value=\"NIST\">NIST</SelectItem>\n                <SelectItem value=\"COBIT\">COBIT</SelectItem>\n                <SelectItem value=\"LGPD\">LGPD</SelectItem>\n                <SelectItem value=\"GDPR\">GDPR</SelectItem>\n                <SelectItem value=\"CUSTOM\">Customizado</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            {/* Limpar filtros */}\n            {(searchTerm || statusFilter !== 'all' || frameworkTypeFilter !== 'all') && (\n              <Button variant=\"outline\" onClick={clearFilters}>\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Limpar\n              </Button>\n            )}\n          </div>\n          \n          {/* Indicador de resultados */}\n          {(searchTerm || statusFilter !== 'all' || frameworkTypeFilter !== 'all') && (\n            <div className=\"mt-4 flex items-center gap-2 text-sm text-muted-foreground\">\n              <Filter className=\"h-4 w-4\" />\n              <span>\n                Mostrando {filteredAssessments.length} de {assessments.length} assessments\n                {searchTerm && ` | Busca: \"${searchTerm}\"`}\n                {statusFilter !== 'all' && ` | Status: ${statusFilter.replace('_', ' ')}`}\n                {frameworkTypeFilter !== 'all' && ` | Framework: ${frameworkTypeFilter}`}\n              </span>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Visão Geral</TabsTrigger>\n          <TabsTrigger value=\"assessments\">Assessments</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          <TabsTrigger value=\"frameworks\">Frameworks</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Cards de Métricas Principais */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {/* Total de Assessments */}\n            <Card \n              className=\"cursor-pointer transition-all duration-200 hover:shadow-lg border-l-4 border-l-blue-500\"\n              onClick={() => toggleCardExpansion('total')}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total de Assessments</p>\n                    <p className=\"text-3xl font-bold text-blue-600\">{metrics?.total_assessments || 0}</p>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"p-3 bg-blue-100 rounded-full\">\n                      <Activity className=\"h-6 w-6 text-blue-600\" />\n                    </div>\n                    {expandedCard === 'total' ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                  </div>\n                </div>\n                \n                {expandedCard === 'total' && (\n                  <div className=\"mt-4 pt-4 border-t space-y-3\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Frameworks ativos:</span>\n                      <span className=\"font-medium\">{metrics?.frameworks_count || 0}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Em atraso:</span>\n                      <span className=\"font-medium text-red-600\">{metrics?.overdue_assessments || 0}</span>\n                    </div>\n                    <Progress \n                      value={metrics?.total_assessments ? (metrics.completed_assessments / metrics.total_assessments) * 100 : 0} \n                      className=\"h-2\" \n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      Taxa de conclusão: {metrics?.total_assessments ? Math.round((metrics.completed_assessments / metrics.total_assessments) * 100) : 0}%\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Assessments Ativos */}\n            <Card \n              className=\"cursor-pointer transition-all duration-200 hover:shadow-lg border-l-4 border-l-green-500\"\n              onClick={() => toggleCardExpansion('active')}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Assessments Ativos</p>\n                    <p className=\"text-3xl font-bold text-green-600\">{metrics?.active_assessments || 0}</p>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"p-3 bg-green-100 rounded-full\">\n                      <Play className=\"h-6 w-6 text-green-600\" />\n                    </div>\n                    {expandedCard === 'active' ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                  </div>\n                </div>\n                \n                <div className=\"mt-2\">\n                  <Progress \n                    value={metrics?.total_assessments ? (metrics.active_assessments / metrics.total_assessments) * 100 : 0} \n                    className=\"h-2\" \n                  />\n                </div>\n                \n                {expandedCard === 'active' && (\n                  <div className=\"mt-4 pt-4 border-t space-y-2\">\n                    {assessments.filter(a => ['iniciado', 'em_andamento', 'em_revisao'].includes(a.status)).slice(0, 3).map(assessment => (\n                      <div key={assessment.id} className=\"flex items-center justify-between text-sm p-2 bg-gray-50 rounded\">\n                        <span className=\"font-medium truncate\">{assessment.titulo}</span>\n                        <Badge className={getStatusColor(assessment.status)}>\n                          {assessment.status.replace('_', ' ')}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Maturidade Média */}\n            <Card \n              className=\"cursor-pointer transition-all duration-200 hover:shadow-lg border-l-4 border-l-purple-500\"\n              onClick={() => toggleCardExpansion('maturity')}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Maturidade Média</p>\n                    <p className=\"text-3xl font-bold text-purple-600\">{metrics?.average_maturity || 0}%</p>\n                    <p className={`text-sm font-medium ${getMaturityLevel(metrics?.average_maturity || 0).color}`}>\n                      {getMaturityLevel(metrics?.average_maturity || 0).level}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"p-3 bg-purple-100 rounded-full\">\n                      <Award className=\"h-6 w-6 text-purple-600\" />\n                    </div>\n                    {expandedCard === 'maturity' ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                  </div>\n                </div>\n                \n                <div className=\"mt-2\">\n                  <Progress value={metrics?.average_maturity || 0} className=\"h-2\" />\n                </div>\n                \n                {expandedCard === 'maturity' && (\n                  <div className=\"mt-4 pt-4 border-t space-y-2\">\n                    <div className=\"text-xs text-muted-foreground\">\n                      <p className=\"font-medium mb-2\">Distribuição por nível:</p>\n                      <div className=\"space-y-1\">\n                        <div className=\"flex justify-between\">\n                          <span>Otimizado (80-100%):</span>\n                          <span>{assessments.filter(a => a.percentual_maturidade >= 80).length}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Gerenciado (60-79%):</span>\n                          <span>{assessments.filter(a => a.percentual_maturidade >= 60 && a.percentual_maturidade < 80).length}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Definido (40-59%):</span>\n                          <span>{assessments.filter(a => a.percentual_maturidade >= 40 && a.percentual_maturidade < 60).length}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Inicial (0-39%):</span>\n                          <span>{assessments.filter(a => a.percentual_maturidade < 40).length}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Planos de Ação */}\n            <Card \n              className=\"cursor-pointer transition-all duration-200 hover:shadow-lg border-l-4 border-l-orange-500\"\n              onClick={() => toggleCardExpansion('actions')}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Planos de Ação</p>\n                    <p className=\"text-3xl font-bold text-orange-600\">{metrics?.pending_action_plans || 0}</p>\n                    <p className=\"text-sm text-muted-foreground\">Pendentes</p>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"p-3 bg-orange-100 rounded-full\">\n                      <Target className=\"h-6 w-6 text-orange-600\" />\n                    </div>\n                    {expandedCard === 'actions' ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                  </div>\n                </div>\n                \n                {expandedCard === 'actions' && (\n                  <div className=\"mt-4 pt-4 border-t\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"w-full\"\n                      onClick={() => navigate('/assessments/action-plans')}\n                    >\n                      <Target className=\"h-4 w-4 mr-2\" />\n                      Ver Todos os Planos\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Ações Rápidas */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer group\" onClick={() => navigate('/assessments/frameworks')}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Frameworks</p>\n                    <p className=\"text-xl font-bold\">Gerenciar</p>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Settings className=\"h-8 w-8 text-blue-600 group-hover:scale-110 transition-transform\" />\n                    <ArrowRight className=\"h-4 w-4 text-muted-foreground ml-2\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer group\" onClick={() => navigate('/assessments/execution')}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Execução</p>\n                    <p className=\"text-xl font-bold\">Assessments</p>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Play className=\"h-8 w-8 text-green-600 group-hover:scale-110 transition-transform\" />\n                    <ArrowRight className=\"h-4 w-4 text-muted-foreground ml-2\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer group\" onClick={() => navigate('/assessments/questions')}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Questões</p>\n                    <p className=\"text-xl font-bold\">Biblioteca</p>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <List className=\"h-8 w-8 text-orange-600 group-hover:scale-110 transition-transform\" />\n                    <ArrowRight className=\"h-4 w-4 text-muted-foreground ml-2\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer group\" onClick={() => navigate('/assessments/reports')}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Relatórios</p>\n                    <p className=\"text-xl font-bold\">Analytics</p>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <BarChart3 className=\"h-8 w-8 text-purple-600 group-hover:scale-110 transition-transform\" />\n                    <ArrowRight className=\"h-4 w-4 text-muted-foreground ml-2\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"assessments\" className=\"space-y-4\">\n          {/* Lista de Assessments */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle>Lista de Assessments</CardTitle>\n                  <CardDescription>\n                    {filteredAssessments.length} de {assessments.length} assessments\n                  </CardDescription>\n                </div>\n                \n                {filteredAssessments.length > 0 && (\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"select-all\"\n                        checked={selectedAssessments.length === filteredAssessments.length && filteredAssessments.length > 0}\n                        onCheckedChange={toggleSelectAll}\n                      />\n                      <label htmlFor=\"select-all\" className=\"text-sm font-medium\">\n                        Selecionar todos\n                      </label>\n                    </div>\n                    \n                    {selectedAssessments.length > 0 && (\n                      <Badge variant=\"secondary\">\n                        {selectedAssessments.length} selecionados\n                      </Badge>\n                    )}\n                  </div>\n                )}\n              </div>\n            </CardHeader>\n            <CardContent>\n              {filteredAssessments.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium mb-2\">Nenhum assessment encontrado</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {assessments.length === 0 \n                      ? 'Comece criando seu primeiro assessment' \n                      : 'Nenhum assessment corresponde aos filtros aplicados'\n                    }\n                  </p>\n                  {assessments.length === 0 ? (\n                    <Button onClick={() => navigate('/assessments/execution')}>\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Criar Primeiro Assessment\n                    </Button>\n                  ) : (\n                    <Button variant=\"outline\" onClick={clearFilters}>\n                      Limpar filtros\n                    </Button>\n                  )}\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {filteredAssessments.map((assessment) => (\n                    <div \n                      key={assessment.id} \n                      className={`flex items-center gap-4 p-4 border rounded-lg transition-all hover:shadow-md ${\n                        selectedAssessments.includes(assessment.id) \n                          ? 'bg-blue-50 border-blue-200' \n                          : 'hover:bg-gray-50'\n                      }`}\n                    >\n                      <Checkbox\n                        checked={selectedAssessments.includes(assessment.id)}\n                        onCheckedChange={() => toggleAssessmentSelection(assessment.id)}\n                      />\n                      \n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold text-lg mb-1\">{assessment.titulo}</h3>\n                            <div className=\"flex items-center gap-3 mb-2\">\n                              <Badge className={getStatusColor(assessment.status)}>\n                                {assessment.status.replace('_', ' ')}\n                              </Badge>\n                              {assessment.framework && (\n                                <Badge variant=\"outline\">\n                                  {assessment.framework.tipo_framework}\n                                </Badge>\n                              )}\n                            </div>\n                            {assessment.descricao && (\n                              <p className=\"text-sm text-muted-foreground mb-2\">\n                                {assessment.descricao}\n                              </p>\n                            )}\n                            <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                              {assessment.data_inicio && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Calendar className=\"h-3 w-3\" />\n                                  Início: {new Date(assessment.data_inicio).toLocaleDateString()}\n                                </span>\n                              )}\n                              {assessment.data_fim_planejada && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Clock className=\"h-3 w-3\" />\n                                  Prazo: {new Date(assessment.data_fim_planejada).toLocaleDateString()}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                          \n                          <div className=\"text-right ml-4\">\n                            <div className=\"mb-2\">\n                              <p className=\"text-sm font-medium\">\n                                {assessment.percentual_conclusao}% concluído\n                              </p>\n                              <Progress \n                                value={assessment.percentual_conclusao} \n                                className=\"h-2 w-24\" \n                              />\n                            </div>\n                            {assessment.percentual_maturidade > 0 && (\n                              <div>\n                                <p className=\"text-sm font-medium text-purple-600\">\n                                  {assessment.percentual_maturidade}% maturidade\n                                </p>\n                                <p className={`text-xs ${getMaturityLevel(assessment.percentual_maturidade).color}`}>\n                                  {getMaturityLevel(assessment.percentual_maturidade).level}\n                                </p>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {/* Ações */}\n                      <div className=\"flex items-center gap-2\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => navigate(`/assessments/execution?id=${assessment.id}`)}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => navigate(`/assessments/execution?id=${assessment.id}&edit=true`)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <div className=\"text-center py-12\">\n            <BarChart3 className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">Analytics em Desenvolvimento</h3>\n            <p className=\"text-muted-foreground\">\n              Dashboards avançados e relatórios analíticos serão implementados em breve.\n            </p>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"frameworks\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Frameworks Disponíveis</CardTitle>\n              <CardDescription>\n                {frameworks.length} frameworks encontrados\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {frameworksLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                  <p className=\"mt-2 text-muted-foreground\">Carregando frameworks...</p>\n                </div>\n              ) : frameworks.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">Nenhum framework encontrado</p>\n                  <Button \n                    className=\"mt-4\"\n                    onClick={() => navigate('/assessments/frameworks')}\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Criar Framework\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {frameworks.map((framework) => (\n                    <Card key={framework.id} className=\"hover:shadow-md transition-shadow\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold\">{framework.nome}</h3>\n                            <Badge variant=\"outline\" className=\"mt-1\">\n                              {framework.tipo_framework}\n                            </Badge>\n                          </div>\n                          {framework.is_standard && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              Padrão\n                            </Badge>\n                          )}\n                        </div>\n                        \n                        {framework.descricao && (\n                          <p className=\"text-sm text-muted-foreground mb-3\">\n                            {framework.descricao}\n                          </p>\n                        )}\n                        \n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                          <span>Versão {framework.versao}</span>\n                          <span className={framework.is_active ? 'text-green-600' : 'text-red-600'}>\n                            {framework.is_active ? 'Ativo' : 'Inativo'}\n                          </span>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}"