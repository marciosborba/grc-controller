/**\n * EXEMPLO DE FORMULARIO COM CRIPTOGRAFIA AUTOMATICA\n * \n * Componente de exemplo que demonstra como integrar o sistema de\n * criptografia por tenant em formularios do GRC Controller.\n */\n\nimport React, { useState } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useTenantCryptoFixed as useTenantCrypto } from '@/hooks/useTenantCryptoFixed';\nimport { toast } from 'sonner';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  Shield,\n  User,\n  DollarSign,\n  FileText,\n  Eye,\n  EyeOff,\n  Save,\n  RefreshCw,\n  Lock,\n  Unlock,\n  AlertTriangle,\n  CheckCircle,\n  Copy\n} from 'lucide-react';\nimport { supabase } from '@/integrations/supabase/client';\n\ninterface FormData {\n  // Dados PII (criptografados)\n  fullName: string;\n  email: string;\n  phone: string;\n  document: string;\n  \n  // Dados financeiros (criptografados)\n  salary: string;\n  budget: string;\n  \n  // Dados de auditoria (criptografados)\n  auditNotes: string;\n  findings: string;\n  \n  // Dados nao sensiveis (nao criptografados)\n  department: string;\n  position: string;\n  status: string;\n}\n\ninterface EncryptedFormData {\n  // Dados PII criptografados\n  full_name_encrypted: string;\n  email_encrypted: string;\n  phone_encrypted: string;\n  document_encrypted: string;\n  \n  // Dados financeiros criptografados\n  salary_encrypted: string;\n  budget_encrypted: string;\n  \n  // Dados de auditoria criptografados\n  audit_notes_encrypted: string;\n  findings_encrypted: string;\n  \n  // Dados nao sensiveis\n  department: string;\n  position: string;\n  status: string;\n  \n  // Metadados\n  tenant_id: string;\n  created_at: string;\n  updated_at: string;\n}\n\nconst CryptoFormExample: React.FC = () => {\n  const { user } = useAuth();\n  const {\n    encryptPII,\n    decryptPII,\n    encryptFinancial,\n    decryptFinancial,\n    encryptAudit,\n    decryptAudit,\n    keyInfo,\n    loading: cryptoLoading,\n    error: cryptoError\n  } = useTenantCrypto();\n  \n  const [formData, setFormData] = useState<FormData>({\n    fullName: '',\n    email: '',\n    phone: '',\n    document: '',\n    salary: '',\n    budget: '',\n    auditNotes: '',\n    findings: '',\n    department: '',\n    position: '',\n    status: 'active'\n  });\n  \n  const [encryptedData, setEncryptedData] = useState<Partial<EncryptedFormData>>({});\n  const [showEncrypted, setShowEncrypted] = useState<Record<string, boolean>>({});\n  const [saving, setSaving] = useState(false);\n  const [testing, setTesting] = useState(false);\n  const [testResults, setTestResults] = useState<any[]>([]);\n  \n  const hasPermission = user?.isPlatformAdmin || false;\n  \n  // Atualizar campo do formulario\n  const updateField = (field: keyof FormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n  \n  // Criptografar todos os dados sensiveis\n  const encryptAllData = async (): Promise<EncryptedFormData | null> => {\n    if (!user?.tenantId) {\n      toast.error('Tenant ID nao encontrado');\n      return null;\n    }\n    \n    try {\n      setSaving(true);\n      \n      // Criptografar dados PII\n      const [fullNameEnc, emailEnc, phoneEnc, documentEnc] = await Promise.all([\n        encryptPII(formData.fullName),\n        encryptPII(formData.email),\n        encryptPII(formData.phone),\n        encryptPII(formData.document)\n      ]);\n      \n      // Criptografar dados financeiros\n      const [salaryEnc, budgetEnc] = await Promise.all([\n        encryptFinancial(formData.salary),\n        encryptFinancial(formData.budget)\n      ]);\n      \n      // Criptografar dados de auditoria\n      const [auditNotesEnc, findingsEnc] = await Promise.all([\n        encryptAudit(formData.auditNotes),\n        encryptAudit(formData.findings)\n      ]);\n      \n      // Verificar se todas as criptografias foram bem-sucedidas\n      if (!fullNameEnc || !emailEnc || !phoneEnc || !documentEnc ||\n          !salaryEnc || !budgetEnc || !auditNotesEnc || !findingsEnc) {\n        throw new Error('Falha na criptografia de alguns campos');\n      }\n      \n      const encrypted: EncryptedFormData = {\n        full_name_encrypted: fullNameEnc,\n        email_encrypted: emailEnc,\n        phone_encrypted: phoneEnc,\n        document_encrypted: documentEnc,\n        salary_encrypted: salaryEnc,\n        budget_encrypted: budgetEnc,\n        audit_notes_encrypted: auditNotesEnc,\n        findings_encrypted: findingsEnc,\n        department: formData.department,\n        position: formData.position,\n        status: formData.status,\n        tenant_id: user.tenantId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n      \n      setEncryptedData(encrypted);\n      toast.success('Dados criptografados com sucesso!');\n      \n      return encrypted;\n      \n    } catch (error: any) {\n      console.error('Erro na criptografia:', error);\n      toast.error(`Erro na criptografia: ${error.message}`);\n      return null;\n    } finally {\n      setSaving(false);\n    }\n  };\n  \n  // Descriptografar dados para exibicao\n  const decryptAllData = async (encrypted: Partial<EncryptedFormData>) => {\n    try {\n      setTesting(true);\n      \n      const results = [];\n      \n      // Descriptografar dados PII\n      if (encrypted.full_name_encrypted) {\n        const decrypted = await decryptPII(encrypted.full_name_encrypted);\n        results.push({\n          field: 'Nome Completo',\n          type: 'PII',\n          original: formData.fullName,\n          encrypted: encrypted.full_name_encrypted,\n          decrypted,\n          success: decrypted === formData.fullName\n        });\n      }\n      \n      if (encrypted.email_encrypted) {\n        const decrypted = await decryptPII(encrypted.email_encrypted);\n        results.push({\n          field: 'Email',\n          type: 'PII',\n          original: formData.email,\n          encrypted: encrypted.email_encrypted,\n          decrypted,\n          success: decrypted === formData.email\n        });\n      }\n      \n      // Descriptografar dados financeiros\n      if (encrypted.salary_encrypted) {\n        const decrypted = await decryptFinancial(encrypted.salary_encrypted);\n        results.push({\n          field: 'Salario',\n          type: 'Financeiro',\n          original: formData.salary,\n          encrypted: encrypted.salary_encrypted,\n          decrypted,\n          success: decrypted === formData.salary\n        });\n      }\n      \n      // Descriptografar dados de auditoria\n      if (encrypted.audit_notes_encrypted) {\n        const decrypted = await decryptAudit(encrypted.audit_notes_encrypted);\n        results.push({\n          field: 'Notas de Auditoria',\n          type: 'Auditoria',\n          original: formData.auditNotes,\n          encrypted: encrypted.audit_notes_encrypted,\n          decrypted,\n          success: decrypted === formData.auditNotes\n        });\n      }\n      \n      setTestResults(results);\n      \n      const successCount = results.filter(r => r.success).length;\n      const totalCount = results.length;\n      \n      if (successCount === totalCount) {\n        toast.success(`Teste de descriptografia: ${successCount}/${totalCount} sucessos`);\n      } else {\n        toast.warning(`Teste de descriptografia: ${successCount}/${totalCount} sucessos`);\n      }\n      \n    } catch (error: any) {\n      console.error('Erro na descriptografia:', error);\n      toast.error(`Erro na descriptografia: ${error.message}`);\n    } finally {\n      setTesting(false);\n    }\n  };\n  \n  // Simular salvamento no banco\n  const saveToDatabase = async () => {\n    const encrypted = await encryptAllData();\n    if (!encrypted) return;\n    \n    try {\n      // Simular insercao no banco (descomente para usar real)\n      /*\n      const { data, error } = await supabase\n        .from('example_encrypted_records')\n        .insert(encrypted)\n        .select()\n        .single();\n      \n      if (error) throw error;\n      \n      toast.success('Dados salvos no banco com criptografia!');\n      console.log('Dados salvos:', data);\n      */\n      \n      // Simulacao\n      console.log('Dados que seriam salvos no banco:', encrypted);\n      toast.success('Simulacao: Dados salvos no banco com criptografia!');\n      \n      // Testar descriptografia\n      await decryptAllData(encrypted);\n      \n    } catch (error: any) {\n      console.error('Erro ao salvar:', error);\n      toast.error(`Erro ao salvar: ${error.message}`);\n    }\n  };\n  \n  // Limpar formulario\n  const clearForm = () => {\n    setFormData({\n      fullName: '',\n      email: '',\n      phone: '',\n      document: '',\n      salary: '',\n      budget: '',\n      auditNotes: '',\n      findings: '',\n      department: '',\n      position: '',\n      status: 'active'\n    });\n    setEncryptedData({});\n    setTestResults([]);\n    setShowEncrypted({});\n  };\n  \n  // Preencher com dados de exemplo\n  const fillExampleData = () => {\n    setFormData({\n      fullName: 'Joao Silva Santos',\n      email: 'joao.silva@empresa.com',\n      phone: '+55 11 99999-9999',\n      document: '123.456.789-00',\n      salary: 'R$ 15.000,00',\n      budget: 'R$ 500.000,00',\n      auditNotes: 'Auditoria realizada conforme ISO 27001. Encontradas 3 nao conformidades menores.',\n      findings: 'Sistema de backup precisa ser melhorado. Controles de acesso estao adequados.',\n      department: 'Tecnologia da Informacao',\n      position: 'Analista de Seguranca',\n      status: 'active'\n    });\n  };\n  \n  if (!hasPermission) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center text-muted-foreground\">\n            <Shield className=\"mx-auto h-12 w-12 mb-4\" />\n            <p>Acesso restrito a administradores da plataforma.</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  if (cryptoError) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center text-destructive\">\n            <AlertTriangle className=\"mx-auto h-12 w-12 mb-4\" />\n            <p>Erro no sistema de criptografia: {cryptoError}</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5 text-primary\" />\n            Exemplo de Formulario com Criptografia\n          </CardTitle>\n          <CardDescription>\n            Demonstracao de como integrar criptografia por tenant em formularios.\n            Os dados sensiveis sao automaticamente criptografados antes do salvamento.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-2\">\n            <Button onClick={fillExampleData} variant=\"outline\" size=\"sm\">\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Preencher Exemplo\n            </Button>\n            <Button onClick={clearForm} variant=\"outline\" size=\"sm\">\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              Limpar\n            </Button>\n            <Button onClick={saveToDatabase} disabled={saving} size=\"sm\">\n              {saving ? (\n                <>\n                  <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Salvando...\n                </>\n              ) : (\n                <>\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  Salvar com Criptografia\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Status das Chaves */}\n      {keyInfo.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-sm\">Status das Chaves Criptograficas</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap gap-2\">\n              {keyInfo.map((key) => (\n                <Badge\n                  key={key.purpose}\n                  variant={key.status === 'OK' ? 'default' : 'destructive'}\n                  className=\"flex items-center gap-1\"\n                >\n                  <Lock className=\"h-3 w-3\" />\n                  {key.purpose} v{key.version}\n                </Badge>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      \n      {/* Formulario */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Dados PII */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-sm\">\n              <User className=\"h-4 w-4 text-blue-500\" />\n              Dados Pessoais (PII)\n              <Badge variant=\"outline\" className=\"text-xs\">\n                <Lock className=\"h-3 w-3 mr-1\" />\n                Criptografado\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"fullName\">Nome Completo</Label>\n              <Input\n                id=\"fullName\"\n                value={formData.fullName}\n                onChange={(e) => updateField('fullName', e.target.value)}\n                placeholder=\"Digite o nome completo\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => updateField('email', e.target.value)}\n                placeholder=\"Digite o email\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phone\">Telefone</Label>\n              <Input\n                id=\"phone\"\n                value={formData.phone}\n                onChange={(e) => updateField('phone', e.target.value)}\n                placeholder=\"Digite o telefone\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"document\">CPF/CNPJ</Label>\n              <Input\n                id=\"document\"\n                value={formData.document}\n                onChange={(e) => updateField('document', e.target.value)}\n                placeholder=\"Digite o documento\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Dados Financeiros */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-sm\">\n              <DollarSign className=\"h-4 w-4 text-green-500\" />\n              Dados Financeiros\n              <Badge variant=\"outline\" className=\"text-xs\">\n                <Lock className=\"h-3 w-3 mr-1\" />\n                Criptografado\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"salary\">Salario</Label>\n              <Input\n                id=\"salary\"\n                value={formData.salary}\n                onChange={(e) => updateField('salary', e.target.value)}\n                placeholder=\"Digite o salario\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"budget\">Orcamento</Label>\n              <Input\n                id=\"budget\"\n                value={formData.budget}\n                onChange={(e) => updateField('budget', e.target.value)}\n                placeholder=\"Digite o orcamento\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"department\">Departamento</Label>\n              <Input\n                id=\"department\"\n                value={formData.department}\n                onChange={(e) => updateField('department', e.target.value)}\n                placeholder=\"Digite o departamento\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                <Unlock className=\"h-3 w-3 inline mr-1\" />\n                Nao criptografado\n              </p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"position\">Cargo</Label>\n              <Input\n                id=\"position\"\n                value={formData.position}\n                onChange={(e) => updateField('position', e.target.value)}\n                placeholder=\"Digite o cargo\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                <Unlock className=\"h-3 w-3 inline mr-1\" />\n                Nao criptografado\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Dados de Auditoria */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-sm\">\n            <FileText className=\"h-4 w-4 text-purple-500\" />\n            Dados de Auditoria\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <Lock className=\"h-3 w-3 mr-1\" />\n              Criptografado\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"auditNotes\">Notas de Auditoria</Label>\n            <Textarea\n              id=\"auditNotes\"\n              value={formData.auditNotes}\n              onChange={(e) => updateField('auditNotes', e.target.value)}\n              placeholder=\"Digite as notas de auditoria\"\n              rows={3}\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"findings\">Achados</Label>\n            <Textarea\n              id=\"findings\"\n              value={formData.findings}\n              onChange={(e) => updateField('findings', e.target.value)}\n              placeholder=\"Digite os achados da auditoria\"\n              rows={3}\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"status\">Status</Label>\n            <Select value={formData.status} onValueChange={(value) => updateField('status', value)}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"active\">Ativo</SelectItem>\n                <SelectItem value=\"inactive\">Inativo</SelectItem>\n                <SelectItem value=\"pending\">Pendente</SelectItem>\n              </SelectContent>\n            </Select>\n            <p className=\"text-xs text-muted-foreground\">\n              <Unlock className=\"h-3 w-3 inline mr-1\" />\n              Nao criptografado\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Resultados dos Testes */}\n      {testResults.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-green-500\" />\n              Resultados do Teste de Criptografia\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {testResults.map((result, index) => (\n                <div\n                  key={index}\n                  className={`p-4 rounded-lg border ${\n                    result.success \n                      ? 'bg-green-50 border-green-200 dark:bg-green-950 dark:border-green-800'\n                      : 'bg-red-50 border-red-200 dark:bg-red-950 dark:border-red-800'\n                  }`}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium\">{result.field}</span>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {result.type}\n                      </Badge>\n                      {result.success ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      ) : (\n                        <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                      )}\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setShowEncrypted(prev => ({\n                        ...prev,\n                        [result.field]: !prev[result.field]\n                      }))}\n                    >\n                      {showEncrypted[result.field] ? (\n                        <>\n                          <EyeOff className=\"h-4 w-4 mr-1\" />\n                          Ocultar\n                        </>\n                      ) : (\n                        <>\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          Mostrar Criptografado\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                  \n                  <div className=\"space-y-2 text-sm\">\n                    <div>\n                      <span className=\"font-medium\">Original:</span>\n                      <div className=\"mt-1 p-2 bg-gray-100 dark:bg-gray-800 rounded font-mono text-xs\">\n                        {result.original}\n                      </div>\n                    </div>\n                    \n                    {showEncrypted[result.field] && (\n                      <div>\n                        <span className=\"font-medium\">Criptografado:</span>\n                        <div className=\"mt-1 p-2 bg-gray-100 dark:bg-gray-800 rounded font-mono text-xs break-all\">\n                          {result.encrypted}\n                        </div>\n                      </div>\n                    )}\n                    \n                    <div>\n                      <span className=\"font-medium\">Descriptografado:</span>\n                      <div className={`mt-1 p-2 rounded font-mono text-xs ${\n                        result.success \n                          ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200'\n                          : 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200'\n                      }`}>\n                        {result.decrypted || 'Erro na descriptografia'}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default CryptoFormExample;\n"