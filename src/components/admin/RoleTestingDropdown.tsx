import React from 'react';
import { TestTube, Crown, Shield, User, AlertTriangle } from 'lucide-react';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { useRoleTesting } from '@/hooks/useRoleTesting';\n\ninterface RoleTestingDropdownProps {\n  collapsed?: boolean;\n}\n\nconst getRoleIcon = (roleId: string) => {\n  switch (roleId) {\n    case 'platform_admin':\n      return Crown;\n    case 'admin':\n    case 'ciso':\n      return Shield;\n    case 'auditor':\n      return AlertTriangle;\n    default:\n      return User;\n  }\n};\n\nconst getRoleBadgeColor = (roleId: string) => {\n  switch (roleId) {\n    case 'platform_admin':\n      return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200';\n    case 'admin':\n      return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n    case 'ciso':\n      return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200';\n    case 'risk_manager':\n      return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';\n    case 'compliance_officer':\n      return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n    case 'auditor':\n      return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n    default:\n      return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\n  }\n};\n\nexport function RoleTestingDropdown({ collapsed = false }: RoleTestingDropdownProps) {\n  const {\n    canTestRoles,\n    isTestingRole,\n    currentTestRole,\n    testRoles,\n    startRoleTesting\n  } = useRoleTesting();\n\n  if (!canTestRoles || !currentTestRole) {\n    return null;\n  }\n\n  const handleRoleChange = (roleId: string) => {\n    startRoleTesting(roleId);\n  };\n\n  const RoleIcon = getRoleIcon(currentTestRole.id);\n\n  return (\n    <div className={`${collapsed ? 'px-1' : 'px-2 sm:px-3'} mb-3 sm:mb-4`}>\n      {!collapsed && (\n        <div className=\"mb-2\">\n          <div className=\"flex items-center gap-2 mb-1\">\n            <TestTube className=\"h-3 w-3 text-orange-600 dark:text-orange-400\" />\n            <span className=\"text-[10px] sm:text-xs font-semibold uppercase tracking-wider text-orange-600 dark:text-orange-400\">\n              Teste de Roles\n            </span>\n          </div>\n          {isTestingRole && (\n            <div className=\"flex items-center gap-1 mb-2\">\n              <AlertTriangle className=\"h-3 w-3 text-amber-500\" />\n              <span className=\"text-[9px] sm:text-[10px] text-amber-600 dark:text-amber-400 font-medium\">\n                Modo de teste ativo\n              </span>\n            </div>\n          )}\n        </div>\n      )}\n      \n      <Select value={currentTestRole.id} onValueChange={handleRoleChange}>\n        <SelectTrigger \n          className={`${\n            collapsed \n              ? 'w-10 h-10 p-0 justify-center' \n              : 'w-full h-auto py-2 px-3'\n          } border-orange-200 dark:border-orange-800 bg-orange-50 dark:bg-orange-950/50 hover:bg-orange-100 dark:hover:bg-orange-900/50 transition-colors`}\n          title={collapsed ? currentTestRole.displayName : ''}\n        >\n          {collapsed ? (\n            <RoleIcon className=\"h-4 w-4 text-orange-600 dark:text-orange-400\" />\n          ) : (\n            <SelectValue>\n              <div className=\"flex items-center gap-2 min-w-0\">\n                <RoleIcon className=\"h-4 w-4 text-orange-600 dark:text-orange-400 flex-shrink-0\" />\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-xs sm:text-sm font-medium text-orange-800 dark:text-orange-200 truncate\">\n                      {currentTestRole.displayName}\n                    </span>\n                    {isTestingRole && (\n                      <Badge \n                        variant=\"outline\" \n                        className=\"text-[9px] px-1 py-0 h-4 bg-amber-100 text-amber-800 border-amber-300 dark:bg-amber-900 dark:text-amber-200 dark:border-amber-700\"\n                      >\n                        TESTE\n                      </Badge>\n                    )}\n                  </div>\n                  <p className=\"text-[9px] sm:text-[10px] text-orange-600 dark:text-orange-400 truncate\">\n                    {currentTestRole.description}\n                  </p>\n                </div>\n              </div>\n            </SelectValue>\n          )}\n        </SelectTrigger>\n        \n        <SelectContent className=\"w-80\">\n          {testRoles.map((role) => {\n            const Icon = getRoleIcon(role.id);\n            const isCurrentRole = role.id === currentTestRole.id;\n            \n            return (\n              <SelectItem \n                key={role.id} \n                value={role.id}\n                className=\"cursor-pointer py-3 px-3\"\n              >\n                <div className=\"flex items-center gap-3 w-full\">\n                  <Icon className=\"h-4 w-4 flex-shrink-0\" />\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <span className=\"font-medium text-sm\">\n                        {role.displayName}\n                      </span>\n                      <Badge \n                        className={`text-[9px] px-1.5 py-0 h-4 ${getRoleBadgeColor(role.id)}`}\n                      >\n                        {role.name.toUpperCase()}\n                      </Badge>\n                      {isCurrentRole && (\n                        <Badge \n                          variant=\"outline\" \n                          className=\"text-[9px] px-1 py-0 h-4 bg-green-100 text-green-800 border-green-300 dark:bg-green-900 dark:text-green-200 dark:border-green-700\"\n                        >\n                          ATIVO\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mb-1\">\n                      {role.description}\n                    </p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {role.permissions.slice(0, 4).map((permission) => (\n                        <Badge \n                          key={permission} \n                          variant=\"secondary\" \n                          className=\"text-[8px] px-1 py-0 h-3\"\n                        >\n                          {permission}\n                        </Badge>\n                      ))}\n                      {role.permissions.length > 4 && (\n                        <Badge \n                          variant=\"secondary\" \n                          className=\"text-[8px] px-1 py-0 h-3\"\n                        >\n                          +{role.permissions.length - 4}\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </SelectItem>\n            );\n          })}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n"