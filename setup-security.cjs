#!/usr/bin/env node\n\n/**\n * 🔐 Setup de Segurança - GRC Controller\n * \n * Script para configurar segurança inicial do banco de dados\n * \n * Funcionalidades:\n * - Configurar autenticação\n * - Criptografar credenciais\n * - Configurar SSL\n * - Criar estrutura de logs\n * - Validar configurações\n */\n\nconst crypto = require('crypto');\nconst fs = require('fs');\nconst path = require('path');\nconst readline = require('readline');\n\nclass SecuritySetup {\n  constructor() {\n    this.configFile = '.env.security';\n    this.envFile = '.env';\n    this.backupDir = 'backups';\n    this.logDir = 'logs';\n  }\n\n  async run() {\n    console.log('🔐 Configuração de Segurança - GRC Controller\\n');\n    \n    try {\n      // Verificar pré-requisitos\n      await this.checkPrerequisites();\n      \n      // Criar estrutura de diretórios\n      this.createDirectories();\n      \n      // Configurar autenticação\n      await this.setupAuthentication();\n      \n      // Configurar criptografia\n      await this.setupEncryption();\n      \n      // Configurar SSL\n      this.setupSSL();\n      \n      // Configurar logs\n      this.setupLogging();\n      \n      // Validar configurações\n      await this.validateSetup();\n      \n      console.log('\\n✅ Configuração de segurança concluída com sucesso!');\n      console.log('\\n📋 Próximos passos:');\n      console.log('1. Teste a conexão: node database-manager-secure.cjs test-connection');\n      console.log('2. Criptografe o .env: node secure-env-manager.cjs encrypt');\n      console.log('3. Configure backup automático');\n      console.log('4. Revise as configurações de segurança');\n      \n    } catch (error) {\n      console.error('❌ Erro durante configuração:', error.message);\n      process.exit(1);\n    }\n  }\n\n  async checkPrerequisites() {\n    console.log('🔍 Verificando pré-requisitos...');\n    \n    // Verificar se .env existe\n    if (!fs.existsSync(this.envFile)) {\n      throw new Error('Arquivo .env não encontrado. Crie-o primeiro.');\n    }\n    \n    // Verificar se tem as variáveis necessárias\n    const envContent = fs.readFileSync(this.envFile, 'utf8');\n    const requiredVars = ['SUPABASE_URL', 'SUPABASE_DB_PASSWORD'];\n    \n    for (const varName of requiredVars) {\n      if (!envContent.includes(varName)) {\n        throw new Error(`Variável ${varName} não encontrada no .env`);\n      }\n    }\n    \n    console.log('✅ Pré-requisitos verificados');\n  }\n\n  createDirectories() {\n    console.log('📁 Criando estrutura de diretórios...');\n    \n    const dirs = [\n      this.backupDir,\n      this.logDir,\n      path.join(this.backupDir, 'env'),\n      path.join(this.backupDir, 'db')\n    ];\n    \n    dirs.forEach(dir => {\n      if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir, { recursive: true });\n        console.log(`  📂 Criado: ${dir}`);\n      }\n    });\n    \n    console.log('✅ Estrutura de diretórios criada');\n  }\n\n  async setupAuthentication() {\n    console.log('🔑 Configurando autenticação...');\n    \n    const rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n    \n    const password = await new Promise((resolve) => {\n      rl.question('Digite uma senha para o database manager (deixe vazio para usar \"admin123\"): ', (answer) => {\n        resolve(answer || 'admin123');\n      });\n    });\n    \n    rl.close();\n    \n    // Gerar salt e hash\n    const salt = 'grc-controller-secure-salt-2025';\n    const hash = crypto.createHash('sha256')\n      .update(password + salt)\n      .digest('hex');\n    \n    // Criar arquivo de configuração de segurança\n    const securityConfig = `# 🔐 Configurações de Segurança - GRC Controller\n# Gerado automaticamente em ${new Date().toISOString()}\n\n# 🔑 Autenticação do Database Manager\nDB_AUTH_SALT=${salt}\nDB_AUTH_HASH=${hash}\n\n# 🌐 Configurações de Rede\nALLOWED_IPS=127.0.0.1,::1\n\n# 🚦 Rate Limiting\nRATE_LIMIT_MAX_ATTEMPTS=5\nRATE_LIMIT_WINDOW_MS=900000\n\n# 📊 Configurações de Log\nLOG_LEVEL=info\nLOG_RETENTION_DAYS=30\nLOG_MAX_FILE_SIZE=10485760\n\n# 🔒 Configurações SSL\nSSL_REJECT_UNAUTHORIZED=true\nSSL_CA_CERT_PATH=\n\n# 🕐 Configurações de Sessão\nSESSION_TIMEOUT_MS=3600000\nMAX_FAILED_AUTH_ATTEMPTS=3\n\n# 🛡️ Configurações de Validação\nSQL_VALIDATION_STRICT=true\nALLOW_DANGEROUS_COMMANDS=false\n`;\n    \n    fs.writeFileSync(this.configFile, securityConfig, { mode: 0o600 });\n    \n    console.log('✅ Autenticação configurada');\n    console.log(`  🔑 Senha configurada: ${password === 'admin123' ? 'admin123 (ALTERE EM PRODUÇÃO!)' : '***'}`);\n  }\n\n  async setupEncryption() {\n    console.log('🔒 Configurando criptografia...');\n    \n    try {\n      // Verificar se secure-env-manager existe\n      if (!fs.existsSync('secure-env-manager.cjs')) {\n        console.log('⚠️  secure-env-manager.cjs não encontrado, pulando criptografia');\n        return;\n      }\n      \n      // Criar backup do .env\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);\n      const backupPath = path.join(this.backupDir, 'env', `.env.backup.${timestamp}`);\n      fs.copyFileSync(this.envFile, backupPath);\n      \n      console.log('✅ Criptografia configurada');\n      console.log(`  💾 Backup criado: ${backupPath}`);\n      console.log('  💡 Execute \"node secure-env-manager.cjs encrypt\" para criptografar');\n      \n    } catch (error) {\n      console.log('⚠️  Erro na configuração de criptografia:', error.message);\n    }\n  }\n\n  setupSSL() {\n    console.log('🔐 Configurando SSL...');\n    \n    // Verificar se certificados existem\n    const certFiles = ['supabase-ca-cert.pem', 'client-cert.pem', 'client-key.pem'];\n    const foundCerts = certFiles.filter(file => fs.existsSync(file));\n    \n    if (foundCerts.length > 0) {\n      console.log(`✅ Certificados encontrados: ${foundCerts.join(', ')}`);\n    } else {\n      console.log('⚠️  Nenhum certificado SSL encontrado');\n      console.log('  💡 Para máxima segurança, configure certificados SSL');\n    }\n  }\n\n  setupLogging() {\n    console.log('📊 Configurando sistema de logs...');\n    \n    // Criar arquivo de log inicial\n    const logFile = path.join(this.logDir, 'database-audit.log');\n    const initialLog = {\n      timestamp: new Date().toISOString(),\n      level: 'INFO',\n      message: 'Sistema de logs inicializado',\n      data: {\n        version: '1.0',\n        setup: true\n      },\n      user: process.env.USER || 'unknown',\n      pid: process.pid\n    };\n    \n    fs.writeFileSync(logFile, JSON.stringify(initialLog) + '\\n');\n    \n    // Criar script de rotação de logs\n    const rotateScript = `#!/bin/bash\n# Script de rotação de logs - GRC Controller\n\nLOG_DIR=\"${this.logDir}\"\nMAX_SIZE=10485760  # 10MB\nMAX_FILES=10\n\nfor logfile in \"$LOG_DIR\"/*.log; do\n  if [ -f \"$logfile\" ] && [ $(stat -c%s \"$logfile\") -gt $MAX_SIZE ]; then\n    timestamp=$(date +\"%Y%m%d_%H%M%S\")\n    mv \"$logfile\" \"$logfile.$timestamp\"\n    touch \"$logfile\"\n    \n    # Manter apenas os últimos arquivos\n    ls -t \"$logfile\".* | tail -n +$((MAX_FILES + 1)) | xargs rm -f\n  fi\ndone\n`;\n    \n    fs.writeFileSync('rotate-logs.sh', rotateScript, { mode: 0o755 });\n    \n    console.log('✅ Sistema de logs configurado');\n    console.log(`  📄 Log principal: ${logFile}`);\n    console.log('  🔄 Script de rotação: rotate-logs.sh');\n  }\n\n  async validateSetup() {\n    console.log('🔍 Validando configurações...');\n    \n    const checks = {\n      envFile: fs.existsSync(this.envFile),\n      securityFile: fs.existsSync(this.configFile),\n      logDir: fs.existsSync(this.logDir),\n      backupDir: fs.existsSync(this.backupDir),\n      gitignore: this.checkGitignore()\n    };\n    \n    console.log('\\n📋 Relatório de Validação:');\n    Object.entries(checks).forEach(([check, passed]) => {\n      console.log(`  ${passed ? '✅' : '❌'} ${check}`);\n    });\n    \n    const allPassed = Object.values(checks).every(Boolean);\n    \n    if (!allPassed) {\n      console.log('\\n⚠️  Algumas verificações falharam. Revise a configuração.');\n    } else {\n      console.log('\\n✅ Todas as verificações passaram!');\n    }\n    \n    return allPassed;\n  }\n\n  checkGitignore() {\n    if (!fs.existsSync('.gitignore')) {\n      return false;\n    }\n    \n    const gitignoreContent = fs.readFileSync('.gitignore', 'utf8');\n    const requiredEntries = ['.env', '.env.security', '.db-session', 'logs/'];\n    \n    return requiredEntries.every(entry => gitignoreContent.includes(entry));\n  }\n\n  // Método para gerar nova senha\n  static generatePassword(length = 16) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\n    let password = '';\n    \n    for (let i = 0; i < length; i++) {\n      password += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    \n    return password;\n  }\n\n  // Método para verificar força da senha\n  static checkPasswordStrength(password) {\n    const checks = {\n      length: password.length >= 8,\n      uppercase: /[A-Z]/.test(password),\n      lowercase: /[a-z]/.test(password),\n      numbers: /\\d/.test(password),\n      special: /[!@#$%^&*(),.?\":{}|<>]/.test(password)\n    };\n    \n    const score = Object.values(checks).filter(Boolean).length;\n    const strength = score < 3 ? 'Fraca' : score < 4 ? 'Média' : 'Forte';\n    \n    return { checks, score, strength };\n  }\n}\n\n// CLI Interface\nasync function main() {\n  const args = process.argv.slice(2);\n  const command = args[0];\n  \n  if (command === 'generate-password') {\n    const length = parseInt(args[1]) || 16;\n    const password = SecuritySetup.generatePassword(length);\n    const strength = SecuritySetup.checkPasswordStrength(password);\n    \n    console.log(`🔑 Senha gerada: ${password}`);\n    console.log(`💪 Força: ${strength.strength} (${strength.score}/5)`);\n    return;\n  }\n  \n  if (command === 'check-password') {\n    const password = args[1];\n    if (!password) {\n      console.error('❌ Uso: check-password <senha>');\n      return;\n    }\n    \n    const strength = SecuritySetup.checkPasswordStrength(password);\n    console.log(`💪 Força da senha: ${strength.strength} (${strength.score}/5)`);\n    console.log('📋 Verificações:');\n    Object.entries(strength.checks).forEach(([check, passed]) => {\n      console.log(`  ${passed ? '✅' : '❌'} ${check}`);\n    });\n    return;\n  }\n  \n  // Executar setup completo\n  const setup = new SecuritySetup();\n  await setup.run();\n}\n\n// Executar apenas se chamado diretamente\nif (require.main === module) {\n  main().catch(console.error);\n}\n\nmodule.exports = SecuritySetup;"