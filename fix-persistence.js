// Script para corrigir problema de persist√™ncia
console.log('üîß === CORRIGINDO PROBLEMA DE PERSIST√äNCIA ===');

// 1. Verificar estado atual
console.log('\nüìä 1. VERIFICANDO ESTADO ATUAL:');
const currentPrimary = getComputedStyle(document.documentElement).getPropertyValue('--primary').trim();
console.log('Cor prim√°ria atual:', currentPrimary);

// 2. Verificar se h√° CSS din√¢mico ativo
console.log('\nüé® 2. VERIFICANDO CSS DIN√ÇMICO:');
const dynamicStyles = document.querySelectorAll('#grc-dynamic-preview, #grc-user-colors, #grc-temp-colors, #dynamic-colors, #preview-colors');
console.log(`Estilos din√¢micos encontrados: ${dynamicStyles.length}`);

dynamicStyles.forEach(style => {
  console.log(`- ${style.id}: ${style.textContent.length} caracteres`);
  
  // Extrair cor prim√°ria do estilo din√¢mico
  const primaryMatch = style.textContent.match(/--primary:\s*([^;!]+)/);
  if (primaryMatch) {
    console.log(`  ‚îî‚îÄ Cor prim√°ria no estilo: ${primaryMatch[1].trim()}`);
  }
});

// 3. Fun√ß√£o para extrair cor do CSS din√¢mico e aplicar no est√°tico
function extractAndApplyToStatic() {
  console.log('\nüîÑ 3. EXTRAINDO COR DO CSS DIN√ÇMICO:');
  
  // Encontrar o estilo din√¢mico com a cor atual
  let extractedColor = null;
  
  dynamicStyles.forEach(style => {
    const primaryMatch = style.textContent.match(/--primary:\s*([^;!]+)/);
    if (primaryMatch) {
      extractedColor = primaryMatch[1].trim().replace('!important', '').trim();
      console.log(`‚úÖ Cor extra√≠da: ${extractedColor}`);
    }
  });
  
  // Se n√£o encontrou no CSS din√¢mico, usar a cor computada atual
  if (!extractedColor) {
    extractedColor = currentPrimary;
    console.log(`üìã Usando cor computada atual: ${extractedColor}`);
  }
  
  if (extractedColor) {
    // Aplicar no CSS est√°tico via fetch e replace
    applyToStaticFile(extractedColor);
  } else {
    console.log('‚ùå N√£o foi poss√≠vel extrair cor para aplicar');
  }
}

// 4. Fun√ß√£o para aplicar cor no arquivo est√°tico
async function applyToStaticFile(colorHsl) {
  console.log('\nüìù 4. APLICANDO NO ARQUIVO EST√ÅTICO:');
  console.log(`Cor a aplicar: ${colorHsl}`);
  
  try {
    // Buscar o arquivo CSS atual
    const response = await fetch('/src/styles/static-colors.css');
    const cssContent = await response.text();
    
    console.log('üìÑ Arquivo CSS carregado, tamanho:', cssContent.length);
    
    // Substituir as cores prim√°rias
    let updatedCSS = cssContent;
    
    // Substituir no light mode
    updatedCSS = updatedCSS.replace(
      /--primary:\s*[^;]+;/g,
      `--primary: ${colorHsl};`
    );
    
    // Substituir hover (calcular uma vers√£o mais escura)
    const hslParts = colorHsl.match(/(\d+)\s+(\d+)%\s+(\d+)%/);
    if (hslParts) {
      const [, h, s, l] = hslParts;
      const darkerL = Math.max(0, parseInt(l) - 4); // 4% mais escuro
      const lighterL = Math.min(100, parseInt(l) + 20); // 20% mais claro
      
      const hoverColor = `${h} ${s}% ${darkerL}%`;
      const glowColor = `${h} ${Math.min(100, parseInt(s) + 5)}% ${lighterL}%`;
      
      updatedCSS = updatedCSS.replace(
        /--primary-hover:\s*[^;]+;/g,
        `--primary-hover: ${hoverColor};`
      );
      
      updatedCSS = updatedCSS.replace(
        /--primary-glow:\s*[^;]+;/g,
        `--primary-glow: ${glowColor};`
      );
      
      console.log(`üé® Cores calculadas:`);
      console.log(`  Primary: ${colorHsl}`);
      console.log(`  Hover: ${hoverColor}`);
      console.log(`  Glow: ${glowColor}`);
    }
    
    // Mostrar o CSS atualizado para o usu√°rio copiar
    console.log('\nüìã 5. CSS ATUALIZADO PARA COPIAR:');
    console.log('Copie o c√≥digo abaixo e substitua o conte√∫do de src/styles/static-colors.css:');
    console.log('');
    console.log('='.repeat(80));
    console.log(updatedCSS);
    console.log('='.repeat(80));
    
    // Criar download autom√°tico
    const blob = new Blob([updatedCSS], { type: 'text/css' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'static-colors-updated.css';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    console.log('\nüíæ Arquivo baixado automaticamente!');
    console.log('üìÅ Substitua src/styles/static-colors.css pelo arquivo baixado');
    
    // Tamb√©m salvar no localStorage para backup
    localStorage.setItem('grc-updated-css', updatedCSS);
    console.log('üíæ CSS salvo no localStorage como backup');
    
  } catch (error) {
    console.error('‚ùå Erro ao processar arquivo CSS:', error);
    
    // Fallback: mostrar instru√ß√µes manuais
    console.log('\nüîß INSTRU√á√ïES MANUAIS:');
    console.log('1. Abra o arquivo src/styles/static-colors.css');
    console.log(`2. Substitua todas as ocorr√™ncias de "--primary:" por "--primary: ${colorHsl};"`);
    console.log('3. Salve o arquivo');
    console.log('4. Recarregue a aplica√ß√£o (F5)');
  }
}

// 5. Fun√ß√£o para for√ßar reload do CSS
function forceReloadCSS() {
  console.log('\nüîÑ 6. FOR√áANDO RELOAD DO CSS:');
  
  const cssLinks = Array.from(document.querySelectorAll('link[rel="stylesheet"]'));
  cssLinks.forEach(link => {
    if (link.href.includes('static-colors') || link.href.includes('index.css')) {
      console.log(`üîÑ Recarregando: ${link.href}`);
      
      const newLink = link.cloneNode();
      newLink.href = link.href.split('?')[0] + '?v=' + Date.now();
      link.parentNode.insertBefore(newLink, link.nextSibling);
      
      setTimeout(() => {
        link.remove();
        console.log(`‚úÖ CSS recarregado: ${newLink.href}`);
      }, 100);
    }
  });
}

// 6. Executar corre√ß√£o
console.log('\nüöÄ EXECUTANDO CORRE√á√ÉO:');

if (dynamicStyles.length > 0) {
  console.log('‚úÖ CSS din√¢mico encontrado, extraindo cor...');
  extractAndApplyToStatic();
} else {
  console.log('‚ö†Ô∏è Nenhum CSS din√¢mico encontrado');
  console.log('üí° V√° para "Cores est√°ticas", selecione uma cor e clique "Aplicar Cores"');
  console.log('üí° Depois execute este script novamente');
}

// 7. Disponibilizar fun√ß√µes globalmente
window.fixPersistence = extractAndApplyToStatic;
window.reloadCSS = forceReloadCSS;

console.log('\nüí° FUN√á√ïES DISPON√çVEIS:');
console.log('- fixPersistence() - Extrair cor din√¢mica e gerar CSS est√°tico');
console.log('- reloadCSS() - For√ßar reload dos arquivos CSS');
console.log('');
console.log('üìã PROCESSO RECOMENDADO:');
console.log('1. Selecione uma cor na interface');
console.log('2. Clique "Aplicar Cores"');
console.log('3. Execute: fixPersistence()');
console.log('4. Substitua o arquivo CSS baixado');
console.log('5. Recarregue a p√°gina (F5)');