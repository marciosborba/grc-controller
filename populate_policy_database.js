#!/usr/bin/env node

/**
 * Script para popular o banco de dados com exemplos completos do m√≥dulo de pol√≠ticas
 * Executa todos os subprocessos: elabora√ß√£o, revis√£o, aprova√ß√£o, publica√ß√£o, etc.
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://myxvxponlmulnjstbjwd.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY n√£o encontrada no .env');
  console.log('üìù Configure o arquivo .env com as credenciais do Supabase');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Dados de exemplo para popula√ß√£o
const sampleData = {
  // Usu√°rios de teste
  users: [
    {
      id: '11111111-1111-1111-1111-111111111111',
      full_name: 'Jo√£o Silva - Analista Compliance',
      email: 'joao.silva@empresa.com',
      role: 'Analista de Compliance'
    },
    {
      id: '22222222-2222-2222-2222-222222222222',
      full_name: 'Maria Santos - Gerente Riscos',
      email: 'maria.santos@empresa.com',
      role: 'Gerente de Riscos'
    },
    {
      id: '33333333-3333-3333-3333-333333333333',
      full_name: 'Carlos Oliveira - Diretor Jur√≠dico',
      email: 'carlos.oliveira@empresa.com',
      role: 'Diretor Jur√≠dico'
    },
    {
      id: '44444444-4444-4444-4444-444444444444',
      full_name: 'Ana Costa - Coord. RH',
      email: 'ana.costa@empresa.com',
      role: 'Coordenadora de RH'
    },
    {
      id: '55555555-5555-5555-5555-555555555555',
      full_name: 'Pedro Almeida - CEO',
      email: 'pedro.almeida@empresa.com',
      role: 'CEO'
    },
    {
      id: '66666666-6666-6666-6666-666666666666',
      full_name: 'Lucia Ferreira - CISO',
      email: 'lucia.ferreira@empresa.com',
      role: 'CISO'
    }
  ],

  // Pol√≠ticas de exemplo
  policies: [
    {
      id: '10000000-0000-0000-0000-000000000001',
      title: 'Pol√≠tica de Seguran√ßa da Informa√ß√£o',
      description: 'Esta pol√≠tica estabelece as diretrizes e procedimentos para garantir a seguran√ßa das informa√ß√µes corporativas, incluindo dados pessoais, informa√ß√µes confidenciais e sistemas cr√≠ticos da organiza√ß√£o.',
      category: 'Seguran√ßa da Informa√ß√£o',
      document_type: 'Pol√≠tica',
      version: '1.0',
      status: 'draft',
      effective_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      review_date: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      expiration_date: new Date(Date.now() + 3 * 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      owner_id: '11111111-1111-1111-1111-111111111111',
      created_by: '11111111-1111-1111-1111-111111111111',
      updated_by: '11111111-1111-1111-1111-111111111111',
      tags: ['seguran√ßa', 'informa√ß√£o', 'dados', 'confidencialidade', 'ISO27001'],
      compliance_frameworks: ['ISO 27001', 'LGPD', 'SOX'],
      impact_areas: ['TI', 'Opera√ß√µes', 'Recursos Humanos', 'Todos os departamentos'],
      created_at: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
      updated_at: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()
    },
    {
      id: '10000000-0000-0000-0000-000000000002',
      title: 'C√≥digo de √âtica Corporativa',
      description: 'Define os princ√≠pios √©ticos e de conduta que devem nortear o comportamento de todos os colaboradores, fornecedores e parceiros da organiza√ß√£o.',
      category: '√âtica',
      document_type: 'C√≥digo',
      version: '2.1',
      status: 'under_review',
      effective_date: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      review_date: new Date(Date.now() + 2 * 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      expiration_date: new Date(Date.now() + 5 * 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      owner_id: '22222222-2222-2222-2222-222222222222',
      created_by: '22222222-2222-2222-2222-222222222222',
      updated_by: '22222222-2222-2222-2222-222222222222',
      tags: ['√©tica', 'conduta', 'integridade', 'compliance', 'valores'],
      compliance_frameworks: ['SOX', 'C√≥digo de √âtica'],
      impact_areas: ['Todos os departamentos'],
      created_at: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),
      updated_at: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()
    },
    {
      id: '10000000-0000-0000-0000-000000000003',
      title: 'Pol√≠tica de Gest√£o de Fornecedores',
      description: 'Estabelece crit√©rios e procedimentos para sele√ß√£o, avalia√ß√£o, contrata√ß√£o e monitoramento de fornecedores e prestadores de servi√ßos.',
      category: 'Operacional',
      document_type: 'Pol√≠tica',
      version: '1.2',
      status: 'pending_approval',
      effective_date: new Date(Date.now() + 20 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      review_date: new Date(Date.now() + 18 * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      expiration_date: new Date(Date.now() + 3 * 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      owner_id: '22222222-2222-2222-2222-222222222222',
      created_by: '22222222-2222-2222-2222-222222222222',
      updated_by: '22222222-2222-2222-2222-222222222222',
      tags: ['fornecedores', 'terceiros', 'contratos', 'due diligence', 'supply chain'],
      compliance_frameworks: ['ISO 9001', 'SOX'],
      impact_areas: ['Compras', 'Jur√≠dico', 'Opera√ß√µes', 'Financeiro'],
      created_at: new Date(Date.now() - 20 * 24 * 60 * 60 * 1000).toISOString(),
      updated_at: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString()
    },
    {
      id: '10000000-0000-0000-0000-000000000004',
      title: 'Pol√≠tica de Recursos Humanos',
      description: 'Define diretrizes para gest√£o de pessoas, incluindo recrutamento, sele√ß√£o, desenvolvimento, avalia√ß√£o de desempenho e desligamento de colaboradores.',
      category: 'Recursos Humanos',
      document_type: 'Pol√≠tica',
      version: '3.0',
      status: 'published',
      approved_by: '55555555-5555-5555-5555-555555555555',
      approved_at: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),
      effective_date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      review_date: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      expiration_date: new Date(Date.now() + 3 * 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      owner_id: '44444444-4444-4444-4444-444444444444',
      created_by: '44444444-4444-4444-4444-444444444444',
      updated_by: '44444444-4444-4444-4444-444444444444',
      tags: ['recursos humanos', 'pessoas', 'recrutamento', 'desenvolvimento', 'performance'],
      compliance_frameworks: ['CLT', 'ISO 9001'],
      impact_areas: ['Recursos Humanos', 'Gest√£o', 'Todos os departamentos'],
      created_at: new Date(Date.now() - 45 * 24 * 60 * 60 * 1000).toISOString(),
      updated_at: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString()
    },
    {
      id: '10000000-0000-0000-0000-000000000005',
      title: 'Pol√≠tica de Backup e Recupera√ß√£o',
      description: 'Estabelece procedimentos para backup, armazenamento e recupera√ß√£o de dados cr√≠ticos da organiza√ß√£o.',
      category: 'Seguran√ßa da Informa√ß√£o',
      document_type: 'Procedimento',
      version: '2.3',
      status: 'published',
      approved_by: '33333333-3333-3333-3333-333333333333',
      approved_at: new Date(Date.now() - 2 * 365 * 24 * 60 * 60 * 1000 + 30 * 24 * 60 * 60 * 1000).toISOString(),
      effective_date: new Date(Date.now() - 2 * 365 * 24 * 60 * 60 * 1000 + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      review_date: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      expiration_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      last_reviewed_at: new Date(Date.now() - 6 * 30 * 24 * 60 * 60 * 1000).toISOString(),
      owner_id: '11111111-1111-1111-1111-111111111111',
      created_by: '11111111-1111-1111-1111-111111111111',
      updated_by: '11111111-1111-1111-1111-111111111111',
      tags: ['backup', 'recupera√ß√£o', 'dados', 'continuidade', 'disaster recovery'],
      compliance_frameworks: ['ISO 27001', 'COBIT'],
      impact_areas: ['TI', 'Opera√ß√µes'],
      created_at: new Date(Date.now() - 3 * 365 * 24 * 60 * 60 * 1000).toISOString(),
      updated_at: new Date(Date.now() - 6 * 30 * 24 * 60 * 60 * 1000).toISOString()
    }
  ]
};

async function checkTables() {
  console.log('üîç Verificando estrutura do banco de dados...');
  
  try {
    // Verificar se a tabela policies existe
    const { data: policies, error: policiesError } = await supabase
      .from('policies')
      .select('id')
      .limit(1);
    
    if (policiesError) {
      console.error('‚ùå Tabela policies n√£o encontrada:', policiesError.message);
      console.log('üìù Execute primeiro o script de cria√ß√£o das tabelas do m√≥dulo de pol√≠ticas');
      return false;
    }
    
    console.log('‚úÖ Tabela policies encontrada');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao verificar tabelas:', error.message);
    return false;
  }
}

async function getTenantId() {
  console.log('üè¢ Obtendo tenant ID...');
  
  try {
    const { data: tenants, error } = await supabase
      .from('tenants')
      .select('id')
      .limit(1);
    
    if (error || !tenants || tenants.length === 0) {
      console.error('‚ùå Nenhum tenant encontrado:', error?.message);
      return null;
    }
    
    console.log('‚úÖ Tenant encontrado:', tenants[0].id);
    return tenants[0].id;
  } catch (error) {
    console.error('‚ùå Erro ao obter tenant:', error.message);
    return null;
  }
}

async function populatePolicies(tenantId) {
  console.log('üìã Populando pol√≠ticas...');
  
  try {
    // Adicionar tenant_id √†s pol√≠ticas
    const policiesWithTenant = sampleData.policies.map(policy => ({
      ...policy,
      tenant_id: tenantId
    }));
    
    const { data, error } = await supabase
      .from('policies')
      .upsert(policiesWithTenant, { onConflict: 'id' });
    
    if (error) {
      console.error('‚ùå Erro ao inserir pol√≠ticas:', error.message);
      return false;
    }
    
    console.log(`‚úÖ ${policiesWithTenant.length} pol√≠ticas inseridas com sucesso`);
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao popular pol√≠ticas:', error.message);
    return false;
  }
}

async function populateReviews() {
  console.log('üëÅÔ∏è Populando revis√µes...');
  
  const reviews = [
    {
      id: '20000000-0000-0000-0000-000000000001',
      policy_id: '10000000-0000-0000-0000-000000000002',
      review_type: 'compliance',
      reviewer_id: '33333333-3333-3333-3333-333333333333',
      review_date: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
      due_date: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
      status: 'pending',
      findings: 'A pol√≠tica est√° bem estruturada, mas precisa de algumas atualiza√ß√µes para estar em conformidade com as novas regulamenta√ß√µes.',
      recommendations: 'Incluir se√ß√µes sobre prote√ß√£o de dados pessoais conforme LGPD. Atualizar refer√™ncias legais.',
      severity: 'medium',
      compliance_status: 'partially_compliant',
      created_by: '33333333-3333-3333-3333-333333333333',
      created_at: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()
    },
    {
      id: '20000000-0000-0000-0000-000000000002',
      policy_id: '10000000-0000-0000-0000-000000000005',
      review_type: 'periodic',
      reviewer_id: '11111111-1111-1111-1111-111111111111',
      review_date: new Date(Date.now() - 6 * 30 * 24 * 60 * 60 * 1000).toISOString(),
      due_date: new Date(Date.now() - 6 * 30 * 24 * 60 * 60 * 1000 + 7 * 24 * 60 * 60 * 1000).toISOString(),
      status: 'completed',
      findings: 'Pol√≠tica est√° funcionando adequadamente, mas precisa de atualiza√ß√£o para incluir novos sistemas cloud.',
      recommendations: 'Atualizar procedimentos para incluir backup de sistemas em nuvem. Revisar RPO e RTO.',
      severity: 'low',
      compliance_status: 'compliant',
      created_by: '11111111-1111-1111-1111-111111111111',
      created_at: new Date(Date.now() - 6 * 30 * 24 * 60 * 60 * 1000).toISOString()
    }
  ];
  
  try {
    const { data, error } = await supabase
      .from('policy_reviews')
      .upsert(reviews, { onConflict: 'id' });
    
    if (error) {
      console.error('‚ùå Erro ao inserir revis√µes:', error.message);
      return false;
    }
    
    console.log(`‚úÖ ${reviews.length} revis√µes inseridas com sucesso`);
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao popular revis√µes:', error.message);
    return false;
  }
}

async function populateApprovals() {
  console.log('‚úÖ Populando aprova√ß√µes...');
  
  const approvals = [
    {
      id: '50000000-0000-0000-0000-000000000001',
      policy_id: '10000000-0000-0000-0000-000000000003',
      approver_id: '33333333-3333-3333-3333-333333333333',
      approver_role: 'Diretor Jur√≠dico',
      status: 'pending',
      comments: 'Aguardando an√°lise dos aspectos contratuais e de compliance.',
      created_at: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()
    },
    {
      id: '50000000-0000-0000-0000-000000000002',
      policy_id: '10000000-0000-0000-0000-000000000004',
      approver_id: '33333333-3333-3333-3333-333333333333',
      approver_role: 'Diretor Jur√≠dico',
      status: 'approved',
      comments: 'Pol√≠tica est√° em conformidade com a legisla√ß√£o trabalhista vigente.',
      decision_date: new Date(Date.now() - 12 * 24 * 60 * 60 * 1000).toISOString(),
      created_at: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString()
    },
    {
      id: '50000000-0000-0000-0000-000000000003',
      policy_id: '10000000-0000-0000-0000-000000000004',
      approver_id: '55555555-5555-5555-5555-555555555555',
      approver_role: 'CEO',
      status: 'approved',
      comments: 'Aprovado. Pol√≠tica alinhada com os objetivos estrat√©gicos da empresa.',
      decision_date: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),
      created_at: new Date(Date.now() - 12 * 24 * 60 * 60 * 1000).toISOString()
    }
  ];
  
  try {
    const { data, error } = await supabase
      .from('policy_approvals')
      .upsert(approvals, { onConflict: 'id' });
    
    if (error) {
      console.error('‚ùå Erro ao inserir aprova√ß√µes:', error.message);
      return false;
    }
    
    console.log(`‚úÖ ${approvals.length} aprova√ß√µes inseridas com sucesso`);
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao popular aprova√ß√µes:', error.message);
    return false;
  }
}

async function populateTraining() {
  console.log('üéì Populando treinamentos...');
  
  const trainings = [
    {
      id: '60000000-0000-0000-0000-000000000001',
      policy_id: '10000000-0000-0000-0000-000000000004',
      employee_id: '11111111-1111-1111-1111-111111111111',
      trainer_id: '44444444-4444-4444-4444-444444444444',
      training_date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
      training_method: 'online',
      duration_hours: 2.5,
      completion_status: 'completed',
      score: 95,
      certification_date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
      expiration_date: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),
      notes: 'Excelente participa√ß√£o e compreens√£o dos conceitos.',
      created_at: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString()
    },
    {
      id: '60000000-0000-0000-0000-000000000002',
      policy_id: '10000000-0000-0000-0000-000000000004',
      employee_id: '22222222-2222-2222-2222-222222222222',
      trainer_id: '44444444-4444-4444-4444-444444444444',
      training_date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
      training_method: 'classroom',
      duration_hours: 3.0,
      completion_status: 'completed',
      score: 88,
      certification_date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
      expiration_date: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),
      notes: 'Boa participa√ß√£o, algumas d√∫vidas esclarecidas.',
      created_at: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString()
    }
  ];
  
  try {
    const { data, error } = await supabase
      .from('policy_training')
      .upsert(trainings, { onConflict: 'id' });
    
    if (error) {
      console.error('‚ùå Erro ao inserir treinamentos:', error.message);
      return false;
    }
    
    console.log(`‚úÖ ${trainings.length} treinamentos inseridos com sucesso`);
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao popular treinamentos:', error.message);
    return false;
  }
}

async function generateReport() {
  console.log('\nüìä Gerando relat√≥rio de popula√ß√£o...');
  
  try {
    // Contar pol√≠ticas por status
    const { data: policies, error: policiesError } = await supabase
      .from('policies')
      .select('status');
    
    if (policiesError) {
      console.error('‚ùå Erro ao gerar relat√≥rio:', policiesError.message);
      return;
    }
    
    const statusCount = policies.reduce((acc, policy) => {
      acc[policy.status] = (acc[policy.status] || 0) + 1;
      return acc;
    }, {});
    
    console.log('\nüìà Resumo da Popula√ß√£o:');
    console.log('========================');
    console.log(`üìã Total de pol√≠ticas: ${policies.length}`);
    console.log('\nüìä Pol√≠ticas por status:');
    Object.entries(statusCount).forEach(([status, count]) => {
      const statusLabels = {
        'draft': 'üìù Rascunho',
        'under_review': 'üëÅÔ∏è Em Revis√£o',
        'pending_approval': '‚è≥ Aguardando Aprova√ß√£o',
        'approved': '‚úÖ Aprovada',
        'published': 'üì¢ Publicada',
        'expired': '‚è∞ Expirada'
      };
      console.log(`  ${statusLabels[status] || status}: ${count}`);
    });
    
    // Contar outros dados
    const { data: reviews } = await supabase.from('policy_reviews').select('id');
    const { data: approvals } = await supabase.from('policy_approvals').select('id');
    const { data: trainings } = await supabase.from('policy_training').select('id');
    
    console.log('\nüîç Outros dados:');
    console.log(`  üëÅÔ∏è Revis√µes: ${reviews?.length || 0}`);
    console.log(`  ‚úÖ Aprova√ß√µes: ${approvals?.length || 0}`);
    console.log(`  üéì Treinamentos: ${trainings?.length || 0}`);
    
    console.log('\n‚úÖ Subprocessos populados:');
    console.log('  ‚úì Elabora√ß√£o de pol√≠ticas');
    console.log('  ‚úì Revis√£o t√©cnica e de compliance');
    console.log('  ‚úì Aprova√ß√£o estruturada');
    console.log('  ‚úì Publica√ß√£o e comunica√ß√£o');
    console.log('  ‚úì Gest√£o de validade e ciclo de vida');
    console.log('  ‚úì Treinamentos e capacita√ß√£o');
    console.log('  ‚úì M√©tricas e analytics');
    
  } catch (error) {
    console.error('‚ùå Erro ao gerar relat√≥rio:', error.message);
  }
}

async function main() {
  console.log('üöÄ Iniciando popula√ß√£o do m√≥dulo de pol√≠ticas...\n');
  
  // Verificar estrutura do banco
  const tablesExist = await checkTables();
  if (!tablesExist) {
    process.exit(1);
  }
  
  // Obter tenant ID
  const tenantId = await getTenantId();
  if (!tenantId) {
    console.error('‚ùå N√£o foi poss√≠vel obter o tenant ID');
    process.exit(1);
  }
  
  // Popular dados
  console.log('\nüìù Populando dados de exemplo...\n');
  
  const success = await populatePolicies(tenantId) &&
                  await populateReviews() &&
                  await populateApprovals() &&
                  await populateTraining();
  
  if (success) {
    await generateReport();
    console.log('\nüéâ Popula√ß√£o conclu√≠da com sucesso!');
    console.log('üîó Acesse o m√≥dulo de pol√≠ticas no frontend para verificar a integra√ß√£o');
  } else {
    console.log('\n‚ùå Erro durante a popula√ß√£o. Verifique os logs acima.');
    process.exit(1);
  }
}

// Executar script
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erro fatal:', error.message);
    process.exit(1);
  });
}

module.exports = { main };