-- =====================================================\n-- MIGRAÇÃO CRÍTICA: Adicionar tenant_id às tabelas\n-- =====================================================\n-- ATENÇÃO: Execute este script em ambiente de teste primeiro!\n-- Faça backup completo antes de executar em produção!\n\n-- Início da transação\nBEGIN;\n\n-- =====================================================\n-- FASE 1: Adicionar colunas tenant_id (nullable)\n-- =====================================================\n\nDO $$\nBEGIN\n    -- Tabelas de Auditoria (CRÍTICAS)\n    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'audits' AND column_name = 'tenant_id') THEN\n        ALTER TABLE audits ADD COLUMN tenant_id UUID REFERENCES tenants(id);\n        RAISE NOTICE 'Adicionado tenant_id à tabela audits';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'audit_findings' AND column_name = 'tenant_id') THEN\n        ALTER TABLE audit_findings ADD COLUMN tenant_id UUID REFERENCES tenants(id);\n        RAISE NOTICE 'Adicionado tenant_id à tabela audit_findings';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'audit_attachments' AND column_name = 'tenant_id') THEN\n        ALTER TABLE audit_attachments ADD COLUMN tenant_id UUID REFERENCES tenants(id);\n        RAISE NOTICE 'Adicionado tenant_id à tabela audit_attachments';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'audit_action_items' AND column_name = 'tenant_id') THEN\n        ALTER TABLE audit_action_items ADD COLUMN tenant_id UUID REFERENCES tenants(id);\n        RAISE NOTICE 'Adicionado tenant_id à tabela audit_action_items';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'audit_team_members' AND column_name = 'tenant_id') THEN\n        ALTER TABLE audit_team_members ADD COLUMN tenant_id UUID REFERENCES tenants(id);\n        RAISE NOTICE 'Adicionado tenant_id à tabela audit_team_members';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'audit_reports' AND column_name = 'tenant_id') THEN\n        ALTER TABLE audit_reports ADD COLUMN tenant_id UUID REFERENCES tenants(id);\n        RAISE NOTICE 'Adicionado tenant_id à tabela audit_reports';\n    END IF;\n\n    -- Tabelas de Logs (CRÍTICAS)\n    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'activity_logs' AND column_name = 'tenant_id') THEN\n        ALTER TABLE activity_logs ADD COLUMN tenant_id UUID REFERENCES tenants(id);\n        RAISE NOTICE 'Adicionado tenant_id à tabela activity_logs';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'ai_chat_logs' AND column_name = 'tenant_id') THEN\n        ALTER TABLE ai_chat_logs ADD COLUMN tenant_id UUID REFERENCES tenants(id);\n        RAISE NOTICE 'Adicionado tenant_id à tabela ai_chat_logs';\n    END IF;\n\n    -- Tabelas de Frameworks (IMPORTANTES)\n    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'frameworks' AND column_name = 'tenant_id') THEN\n        ALTER TABLE frameworks ADD COLUMN tenant_id UUID REFERENCES tenants(id);\n        RAISE NOTICE 'Adicionado tenant_id à tabela frameworks';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'framework_controls' AND column_name = 'tenant_id') THEN\n        ALTER TABLE framework_controls ADD COLUMN tenant_id UUID REFERENCES tenants(id);\n        RAISE NOTICE 'Adicionado tenant_id à tabela framework_controls';\n    END IF;\n\n    -- Tabelas de Compliance (IMPORTANTES)\n    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'compliance_records' AND column_name = 'tenant_id') THEN\n        ALTER TABLE compliance_records ADD COLUMN tenant_id UUID REFERENCES tenants(id);\n        RAISE NOTICE 'Adicionado tenant_id à tabela compliance_records';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'controls' AND column_name = 'tenant_id') THEN\n        ALTER TABLE controls ADD COLUMN tenant_id UUID REFERENCES tenants(id);\n        RAISE NOTICE 'Adicionado tenant_id à tabela controls';\n    END IF;\n\n    -- Tabelas de Usuários (IMPORTANTES)\n    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'user_roles' AND column_name = 'tenant_id') THEN\n        ALTER TABLE user_roles ADD COLUMN tenant_id UUID REFERENCES tenants(id);\n        RAISE NOTICE 'Adicionado tenant_id à tabela user_roles';\n    END IF;\n\n    -- Tabelas de IA (IMPORTANTES)\n    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'ai_grc_prompt_templates' AND column_name = 'tenant_id') THEN\n        ALTER TABLE ai_grc_prompt_templates ADD COLUMN tenant_id UUID REFERENCES tenants(id);\n        RAISE NOTICE 'Adicionado tenant_id à tabela ai_grc_prompt_templates';\n    END IF;\n\nEND $$;\n\n-- =====================================================\n-- FASE 2: Migração de dados existentes\n-- =====================================================\n\n-- Função para obter o primeiro tenant (para dados órfãos)\nCREATE OR REPLACE FUNCTION get_default_tenant_id() RETURNS UUID AS $$\nDECLARE\n    default_tenant_id UUID;\nBEGIN\n    SELECT id INTO default_tenant_id FROM tenants ORDER BY created_at LIMIT 1;\n    IF default_tenant_id IS NULL THEN\n        RAISE EXCEPTION 'Nenhum tenant encontrado. Crie pelo menos um tenant antes de executar a migração.';\n    END IF;\n    RETURN default_tenant_id;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Migrar dados de auditoria\nDO $$\nDECLARE\n    default_tenant UUID;\nBEGIN\n    default_tenant := get_default_tenant_id();\n    \n    -- Migrar auditorias órfãs\n    UPDATE audits SET tenant_id = default_tenant WHERE tenant_id IS NULL;\n    RAISE NOTICE 'Migrados % registros de audits', (SELECT COUNT(*) FROM audits WHERE tenant_id = default_tenant);\n    \n    -- Migrar audit_findings baseado na auditoria pai\n    UPDATE audit_findings \n    SET tenant_id = (\n        SELECT a.tenant_id \n        FROM audits a \n        WHERE a.id = audit_findings.audit_id\n    )\n    WHERE tenant_id IS NULL;\n    \n    -- Para audit_findings órfãos (sem auditoria pai)\n    UPDATE audit_findings SET tenant_id = default_tenant \n    WHERE tenant_id IS NULL;\n    \n    RAISE NOTICE 'Migrados registros de audit_findings';\n    \n    -- Migrar audit_attachments baseado na auditoria pai\n    UPDATE audit_attachments \n    SET tenant_id = (\n        SELECT a.tenant_id \n        FROM audits a \n        WHERE a.id = audit_attachments.audit_id\n    )\n    WHERE tenant_id IS NULL;\n    \n    -- Para attachments órfãos\n    UPDATE audit_attachments SET tenant_id = default_tenant \n    WHERE tenant_id IS NULL;\n    \n    RAISE NOTICE 'Migrados registros de audit_attachments';\n    \n    -- Migrar audit_action_items baseado no finding pai\n    UPDATE audit_action_items \n    SET tenant_id = (\n        SELECT af.tenant_id \n        FROM audit_findings af \n        WHERE af.id = audit_action_items.finding_id\n    )\n    WHERE tenant_id IS NULL;\n    \n    -- Para action_items órfãos\n    UPDATE audit_action_items SET tenant_id = default_tenant \n    WHERE tenant_id IS NULL;\n    \n    RAISE NOTICE 'Migrados registros de audit_action_items';\n    \n    -- Migrar audit_team_members baseado na auditoria pai\n    UPDATE audit_team_members \n    SET tenant_id = (\n        SELECT a.tenant_id \n        FROM audits a \n        WHERE a.id = audit_team_members.audit_id\n    )\n    WHERE tenant_id IS NULL;\n    \n    -- Para team_members órfãos\n    UPDATE audit_team_members SET tenant_id = default_tenant \n    WHERE tenant_id IS NULL;\n    \n    RAISE NOTICE 'Migrados registros de audit_team_members';\n    \n    -- Migrar audit_reports\n    UPDATE audit_reports SET tenant_id = default_tenant WHERE tenant_id IS NULL;\n    RAISE NOTICE 'Migrados registros de audit_reports';\n    \n    -- Migrar activity_logs baseado no user_id\n    UPDATE activity_logs \n    SET tenant_id = (\n        SELECT p.tenant_id \n        FROM profiles p \n        WHERE p.user_id = activity_logs.user_id\n    )\n    WHERE tenant_id IS NULL AND user_id IS NOT NULL;\n    \n    -- Para logs órfãos\n    UPDATE activity_logs SET tenant_id = default_tenant \n    WHERE tenant_id IS NULL;\n    \n    RAISE NOTICE 'Migrados registros de activity_logs';\n    \n    -- Migrar ai_chat_logs baseado no user_id\n    UPDATE ai_chat_logs \n    SET tenant_id = (\n        SELECT p.tenant_id \n        FROM profiles p \n        WHERE p.user_id = ai_chat_logs.user_id\n    )\n    WHERE tenant_id IS NULL AND user_id IS NOT NULL;\n    \n    -- Para chat_logs órfãos\n    UPDATE ai_chat_logs SET tenant_id = default_tenant \n    WHERE tenant_id IS NULL;\n    \n    RAISE NOTICE 'Migrados registros de ai_chat_logs';\n    \n    -- Migrar user_roles baseado no user_id\n    UPDATE user_roles \n    SET tenant_id = (\n        SELECT p.tenant_id \n        FROM profiles p \n        WHERE p.user_id = user_roles.user_id\n    )\n    WHERE tenant_id IS NULL AND user_id IS NOT NULL;\n    \n    -- Para roles órfãos\n    UPDATE user_roles SET tenant_id = default_tenant \n    WHERE tenant_id IS NULL;\n    \n    RAISE NOTICE 'Migrados registros de user_roles';\n    \nEND $$;\n\n-- =====================================================\n-- FASE 3: Duplicar frameworks e controles para todos os tenants\n-- =====================================================\n\nDO $$\nDECLARE\n    tenant_record RECORD;\n    framework_record RECORD;\n    control_record RECORD;\nBEGIN\n    -- Para cada tenant existente\n    FOR tenant_record IN SELECT id, name FROM tenants LOOP\n        RAISE NOTICE 'Criando frameworks para tenant: %', tenant_record.name;\n        \n        -- Duplicar frameworks órfãos para este tenant\n        FOR framework_record IN SELECT * FROM frameworks WHERE tenant_id IS NULL LOOP\n            INSERT INTO frameworks (\n                id, name, description, version, is_active, \n                created_at, updated_at, tenant_id\n            ) VALUES (\n                gen_random_uuid(),\n                framework_record.name,\n                framework_record.description,\n                framework_record.version,\n                framework_record.is_active,\n                framework_record.created_at,\n                NOW(),\n                tenant_record.id\n            );\n        END LOOP;\n        \n        -- Duplicar controles órfãos para este tenant\n        FOR control_record IN SELECT * FROM controls WHERE tenant_id IS NULL LOOP\n            INSERT INTO controls (\n                id, control_id, title, description, control_type,\n                implementation_status, effectiveness, created_at, updated_at,\n                tenant_id\n            ) VALUES (\n                gen_random_uuid(),\n                control_record.control_id,\n                control_record.title,\n                control_record.description,\n                control_record.control_type,\n                control_record.implementation_status,\n                control_record.effectiveness,\n                control_record.created_at,\n                NOW(),\n                tenant_record.id\n            );\n        END LOOP;\n        \n        -- Duplicar compliance_records para este tenant\n        FOR control_record IN SELECT * FROM compliance_records WHERE tenant_id IS NULL LOOP\n            INSERT INTO compliance_records (\n                id, control_id, framework, control_description,\n                compliance_status, created_at, updated_at, tenant_id\n            ) VALUES (\n                gen_random_uuid(),\n                control_record.control_id,\n                control_record.framework,\n                control_record.control_description,\n                control_record.compliance_status,\n                control_record.created_at,\n                NOW(),\n                tenant_record.id\n            );\n        END LOOP;\n        \n        -- Duplicar ai_grc_prompt_templates para este tenant\n        FOR control_record IN SELECT * FROM ai_grc_prompt_templates WHERE tenant_id IS NULL LOOP\n            INSERT INTO ai_grc_prompt_templates (\n                id, name, title, description, category, use_case,\n                template_content, is_active, is_global, is_public,\n                created_at, updated_at, tenant_id\n            ) VALUES (\n                gen_random_uuid(),\n                control_record.name,\n                control_record.title,\n                control_record.description,\n                control_record.category,\n                control_record.use_case,\n                control_record.template_content,\n                control_record.is_active,\n                false, -- Não é mais global\n                false, -- Não é mais público\n                control_record.created_at,\n                NOW(),\n                tenant_record.id\n            );\n        END LOOP;\n        \n    END LOOP;\n    \n    RAISE NOTICE 'Frameworks e controles duplicados para todos os tenants';\nEND $$;\n\n-- =====================================================\n-- FASE 4: Remover registros órfãos originais\n-- =====================================================\n\n-- Remover frameworks órfãos originais\nDELETE FROM frameworks WHERE tenant_id IS NULL;\nRAISE NOTICE 'Removidos frameworks órfãos originais';\n\n-- Remover controles órfãos originais\nDELETE FROM controls WHERE tenant_id IS NULL;\nRAISE NOTICE 'Removidos controles órfãos originais';\n\n-- Remover compliance_records órfãos originais\nDELETE FROM compliance_records WHERE tenant_id IS NULL;\nRAISE NOTICE 'Removidos compliance_records órfãos originais';\n\n-- Remover ai_grc_prompt_templates órfãos originais\nDELETE FROM ai_grc_prompt_templates WHERE tenant_id IS NULL;\nRAISE NOTICE 'Removidos ai_grc_prompt_templates órfãos originais';\n\n-- =====================================================\n-- FASE 5: Tornar tenant_id obrigatório\n-- =====================================================\n\nDO $$\nBEGIN\n    -- Verificar se todos os registros têm tenant_id\n    IF EXISTS (SELECT 1 FROM audits WHERE tenant_id IS NULL) THEN\n        RAISE EXCEPTION 'Ainda existem registros em audits sem tenant_id';\n    END IF;\n    \n    IF EXISTS (SELECT 1 FROM audit_findings WHERE tenant_id IS NULL) THEN\n        RAISE EXCEPTION 'Ainda existem registros em audit_findings sem tenant_id';\n    END IF;\n    \n    -- Continuar verificações para todas as tabelas...\n    \n    -- Se chegou até aqui, pode tornar NOT NULL\n    ALTER TABLE audits ALTER COLUMN tenant_id SET NOT NULL;\n    ALTER TABLE audit_findings ALTER COLUMN tenant_id SET NOT NULL;\n    ALTER TABLE audit_attachments ALTER COLUMN tenant_id SET NOT NULL;\n    ALTER TABLE audit_action_items ALTER COLUMN tenant_id SET NOT NULL;\n    ALTER TABLE audit_team_members ALTER COLUMN tenant_id SET NOT NULL;\n    ALTER TABLE audit_reports ALTER COLUMN tenant_id SET NOT NULL;\n    ALTER TABLE activity_logs ALTER COLUMN tenant_id SET NOT NULL;\n    ALTER TABLE ai_chat_logs ALTER COLUMN tenant_id SET NOT NULL;\n    ALTER TABLE frameworks ALTER COLUMN tenant_id SET NOT NULL;\n    ALTER TABLE framework_controls ALTER COLUMN tenant_id SET NOT NULL;\n    ALTER TABLE compliance_records ALTER COLUMN tenant_id SET NOT NULL;\n    ALTER TABLE controls ALTER COLUMN tenant_id SET NOT NULL;\n    ALTER TABLE user_roles ALTER COLUMN tenant_id SET NOT NULL;\n    ALTER TABLE ai_grc_prompt_templates ALTER COLUMN tenant_id SET NOT NULL;\n    \n    RAISE NOTICE 'Todos os campos tenant_id agora são obrigatórios';\nEND $$;\n\n-- =====================================================\n-- FASE 6: Criar índices para performance\n-- =====================================================\n\n-- Índices compostos para queries comuns\nCREATE INDEX IF NOT EXISTS idx_audits_tenant_status ON audits(tenant_id, status);\nCREATE INDEX IF NOT EXISTS idx_audit_findings_tenant_status ON audit_findings(tenant_id, status);\nCREATE INDEX IF NOT EXISTS idx_activity_logs_tenant_created ON activity_logs(tenant_id, created_at DESC);\nCREATE INDEX IF NOT EXISTS idx_frameworks_tenant_active ON frameworks(tenant_id, is_active);\nCREATE INDEX IF NOT EXISTS idx_user_roles_tenant_user ON user_roles(tenant_id, user_id);\n\nRAISE NOTICE 'Índices criados para otimização de performance';\n\n-- =====================================================\n-- FASE 7: Implementar Row Level Security (RLS)\n-- =====================================================\n\n-- Habilitar RLS em todas as tabelas\nALTER TABLE audits ENABLE ROW LEVEL SECURITY;\nALTER TABLE audit_findings ENABLE ROW LEVEL SECURITY;\nALTER TABLE audit_attachments ENABLE ROW LEVEL SECURITY;\nALTER TABLE audit_action_items ENABLE ROW LEVEL SECURITY;\nALTER TABLE audit_team_members ENABLE ROW LEVEL SECURITY;\nALTER TABLE audit_reports ENABLE ROW LEVEL SECURITY;\nALTER TABLE activity_logs ENABLE ROW LEVEL SECURITY;\nALTER TABLE ai_chat_logs ENABLE ROW LEVEL SECURITY;\nALTER TABLE frameworks ENABLE ROW LEVEL SECURITY;\nALTER TABLE framework_controls ENABLE ROW LEVEL SECURITY;\nALTER TABLE compliance_records ENABLE ROW LEVEL SECURITY;\nALTER TABLE controls ENABLE ROW LEVEL SECURITY;\nALTER TABLE user_roles ENABLE ROW LEVEL SECURITY;\nALTER TABLE ai_grc_prompt_templates ENABLE ROW LEVEL SECURITY;\n\n-- Criar políticas de isolamento por tenant\nCREATE POLICY tenant_isolation_audits ON audits\n    FOR ALL TO authenticated\n    USING (tenant_id = current_setting('app.current_tenant')::uuid);\n\nCREATE POLICY tenant_isolation_audit_findings ON audit_findings\n    FOR ALL TO authenticated\n    USING (tenant_id = current_setting('app.current_tenant')::uuid);\n\nCREATE POLICY tenant_isolation_audit_attachments ON audit_attachments\n    FOR ALL TO authenticated\n    USING (tenant_id = current_setting('app.current_tenant')::uuid);\n\nCREATE POLICY tenant_isolation_audit_action_items ON audit_action_items\n    FOR ALL TO authenticated\n    USING (tenant_id = current_setting('app.current_tenant')::uuid);\n\nCREATE POLICY tenant_isolation_audit_team_members ON audit_team_members\n    FOR ALL TO authenticated\n    USING (tenant_id = current_setting('app.current_tenant')::uuid);\n\nCREATE POLICY tenant_isolation_audit_reports ON audit_reports\n    FOR ALL TO authenticated\n    USING (tenant_id = current_setting('app.current_tenant')::uuid);\n\nCREATE POLICY tenant_isolation_activity_logs ON activity_logs\n    FOR ALL TO authenticated\n    USING (tenant_id = current_setting('app.current_tenant')::uuid);\n\nCREATE POLICY tenant_isolation_ai_chat_logs ON ai_chat_logs\n    FOR ALL TO authenticated\n    USING (tenant_id = current_setting('app.current_tenant')::uuid);\n\nCREATE POLICY tenant_isolation_frameworks ON frameworks\n    FOR ALL TO authenticated\n    USING (tenant_id = current_setting('app.current_tenant')::uuid);\n\nCREATE POLICY tenant_isolation_framework_controls ON framework_controls\n    FOR ALL TO authenticated\n    USING (tenant_id = current_setting('app.current_tenant')::uuid);\n\nCREATE POLICY tenant_isolation_compliance_records ON compliance_records\n    FOR ALL TO authenticated\n    USING (tenant_id = current_setting('app.current_tenant')::uuid);\n\nCREATE POLICY tenant_isolation_controls ON controls\n    FOR ALL TO authenticated\n    USING (tenant_id = current_setting('app.current_tenant')::uuid);\n\nCREATE POLICY tenant_isolation_user_roles ON user_roles\n    FOR ALL TO authenticated\n    USING (tenant_id = current_setting('app.current_tenant')::uuid);\n\nCREATE POLICY tenant_isolation_ai_grc_prompt_templates ON ai_grc_prompt_templates\n    FOR ALL TO authenticated\n    USING (tenant_id = current_setting('app.current_tenant')::uuid);\n\nRAISE NOTICE 'Row Level Security implementado em todas as tabelas';\n\n-- Limpar função temporária\nDROP FUNCTION get_default_tenant_id();\n\n-- Confirmar transação\nCOMMIT;\n\nRAISE NOTICE '🎉 MIGRAÇÃO CONCLUÍDA COM SUCESSO! 🎉';\nRAISE NOTICE 'Todas as tabelas agora têm isolamento por tenant implementado.';\nRAISE NOTICE 'Row Level Security está ativo em todas as tabelas.';\nRAISE NOTICE 'Próximo passo: Atualizar o código da aplicação.';"