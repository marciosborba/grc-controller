-- Migration para corrigir atualização de settings na função rpc_manage_tenant\n-- Criado em: 2025-01-15\n\n-- Atualizar função RPC para incluir atualização de settings\nCREATE OR REPLACE FUNCTION rpc_manage_tenant(\n    action TEXT,\n    tenant_data JSONB DEFAULT NULL,\n    tenant_id_param UUID DEFAULT NULL\n)\nRETURNS JSONB\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = 'public'\nAS $$\nDECLARE\n    result JSONB;\n    current_user_id UUID;\nBEGIN\n    current_user_id := auth.uid();\n    \n    -- Verificar se usuário é admin da plataforma\n    IF NOT is_platform_admin(current_user_id) THEN\n        RAISE EXCEPTION 'Acesso negado. Apenas administradores da plataforma podem gerenciar tenants.';\n    END IF;\n    \n    CASE action\n        WHEN 'create' THEN\n            INSERT INTO tenants (name, slug, contact_email, contact_phone, billing_email, max_users, subscription_plan, settings)\n            VALUES (\n                tenant_data->>'name',\n                tenant_data->>'slug',\n                tenant_data->>'contact_email',\n                tenant_data->>'contact_phone',\n                tenant_data->>'billing_email',\n                COALESCE((tenant_data->>'max_users')::INTEGER, 10),\n                COALESCE(tenant_data->>'subscription_plan', 'basic'),\n                COALESCE(tenant_data->'settings', '{}'::jsonb)\n            )\n            RETURNING jsonb_build_object('id', id, 'status', 'created') INTO result;\n            \n        WHEN 'update' THEN\n            UPDATE tenants \n            SET \n                name = COALESCE(tenant_data->>'name', name),\n                contact_email = COALESCE(tenant_data->>'contact_email', contact_email),\n                contact_phone = COALESCE(tenant_data->>'contact_phone', contact_phone),\n                billing_email = COALESCE(tenant_data->>'billing_email', billing_email),\n                max_users = COALESCE((tenant_data->>'max_users')::INTEGER, max_users),\n                current_users_count = COALESCE((tenant_data->>'current_users_count')::INTEGER, current_users_count),\n                subscription_plan = COALESCE(tenant_data->>'subscription_plan', subscription_plan),\n                subscription_status = COALESCE(tenant_data->>'subscription_status', subscription_status),\n                is_active = COALESCE((tenant_data->>'is_active')::BOOLEAN, is_active),\n                settings = COALESCE(tenant_data->'settings', settings),\n                updated_at = now()\n            WHERE id = tenant_id_param\n            RETURNING jsonb_build_object('id', id, 'status', 'updated') INTO result;\n            \n        WHEN 'delete' THEN\n            -- Verificar se tenant tem usuários\n            IF EXISTS (SELECT 1 FROM profiles WHERE tenant_id = tenant_id_param) THEN\n                RAISE EXCEPTION 'Não é possível excluir tenant com usuários associados.';\n            END IF;\n            \n            DELETE FROM tenants WHERE id = tenant_id_param\n            RETURNING jsonb_build_object('id', id, 'status', 'deleted') INTO result;\n            \n        ELSE\n            RAISE EXCEPTION 'Ação inválida: %', action;\n    END CASE;\n    \n    RETURN COALESCE(result, '{\"status\": \"no_change\"}'::jsonb);\nEND;\n$$;\n\n-- Comentário sobre a atualização\nCOMMENT ON FUNCTION rpc_manage_tenant IS 'Função para gerenciar tenants - atualizada para incluir settings';"